<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <header time="2018-05-02 13:15:22">
   <application file="sbignum.c"/>
  </header>
  <function fname="mpz_muli_raw">
   <ppos>
    <ppo deps="s" id="239" ippo="239" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="182" ippo="182" s="g">
     <e txt="arguments of pointer arithmetic are checked for null"/>
    </ppo>
    <ppo deps="s" id="18" ippo="18" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="s" id="129" ippo="129" s="g">
     <e txt="arguments of pointer arithmetic are checked for null"/>
    </ppo>
    <ppo deps="f" id="50" invs="319" ippo="50" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(d_6_)#init"/>
    </ppo>
    <ppo deps="f" id="80" invs="243" ippo="80" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#913(rv:mpz_zero_realloc)"/>
    </ppo>
    <ppo deps="a" id="108" ids="1" invs="291" ippo="108" s="g" ts="2018-05-02 13:04:36">
     <e txt="not-null(d) delegated to api"/>
    </ppo>
    <ppo deps="s" id="166" ippo="166" s="g">
     <e txt="value 32 requires a minimum word size of 64"/>
    </ppo>
    <ppo deps="s" id="104" ippo="104" s="g">
     <e txt="casting from unsigned int to unsigned long is safe"/>
    </ppo>
    <ppo deps="s" id="130" ippo="130" s="g">
     <e txt="pointer arithmetic stays within memory region"/>
    </ppo>
    <ppo deps="s" id="25" ippo="25" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="s" id="49" ippo="49" s="g">
     <e txt="d is a function parameter"/>
    </ppo>
    <ppo deps="f" id="52" invs="53" ippo="52" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is initial value of parameter d satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="188" invs="278" ippo="188" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#922"/>
    </ppo>
    <ppo deps="f" id="4" invs="338" ippo="4" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(z_4_)#init"/>
    </ppo>
    <ppo deps="s" id="200" ippo="200" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="219" invs="250" ippo="219" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#889"/>
    </ppo>
    <ppo deps="s" id="30" ippo="30" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="62" invs="31" ippo="62" s="g" ts="2018-05-02 13:04:36">
     <e txt="lower-bound value is address of stack variable rt"/>
    </ppo>
    <ppo deps="f" id="103" invs="81" ippo="103" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is initial value of parameter z satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="185" ippo="185" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy upperbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="189" ippo="189" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="102" invs="81" ippo="102" s="g" ts="2018-05-02 13:04:36">
     <e txt="initial value of parameter z satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="106" ippo="106" s="g">
     <e txt="d is a function parameter"/>
    </ppo>
    <ppo deps="s" id="206" ippo="206" s="g">
     <e txt="arguments of pointer arithmetic are checked for null"/>
    </ppo>
    <ppo deps="s" id="14" ippo="14" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo id="111" ippo="111">
     <d>
      <invs>
       <arg a="4" i="122,121,212,238"/>
       <arg a="3" i="126,125,381"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="145" invs="120" ippo="145" s="g" ts="2018-05-02 13:04:36">
     <e txt="lower-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="s" id="15" ippo="15" s="g">
     <e txt="z is a function parameter"/>
    </ppo>
    <ppo deps="s" id="82" ippo="82" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="133" ippo="133" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="89" ippo="89" s="g">
     <e txt="constant value 0 fits in type unsigned int"/>
    </ppo>
    <ppo deps="f" id="221" invs="321" ippo="221" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(r_2_)#init, addrof_localvar_rt_67"/>
    </ppo>
    <ppo deps="f" id="180" invs="148" ippo="180" s="g" ts="2018-05-02 13:04:36">
     <e txt="non-negative pointer increment: lower bound for ((i + j):u_int32_t is 0"/>
    </ppo>
    <ppo deps="s" id="56" ippo="56" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="79" invs="275" ippo="79" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#889"/>
    </ppo>
    <ppo deps="f" id="217" invs="137" ippo="217" s="g" ts="2018-05-02 13:04:36">
     <e txt="lower-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="s" id="164" ippo="164" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="31" ippo="31"/>
    <ppo deps="f" id="121" invs="293" ippo="121" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(z_4_)#init"/>
    </ppo>
    <ppo deps="s" id="12" ippo="12" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo id="141" ippo="141"/>
    <ppo deps="f" id="216" invs="306" ippo="216" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(r_2_)#init, addrof_localvar_rt_67"/>
    </ppo>
    <ppo deps="f" id="101" invs="339" ippo="101" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(z_4_)#init"/>
    </ppo>
    <ppo id="168" ippo="168"/>
    <ppo deps="s" id="209" ippo="209" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy upperbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="a" id="69" ids="2" invs="32" ippo="69" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition initialized(r-&gt;s) delegated to api"/>
    </ppo>
    <ppo id="152" ippo="152"/>
    <ppo id="205" ippo="205">
     <d>
      <invs>
       <arg a="4" i="140,139,214"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="8" ippo="8" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="160" ippo="160" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="201" ippo="201" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="204" invs="214" ippo="204" s="g" ts="2018-05-02 13:04:36">
     <e txt="non-negative pointer increment: lower bound for ((i + j):u_int32_t is 0"/>
    </ppo>
    <ppo deps="s" id="235" ippo="235" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="246" invs="156" ippo="246" s="g" ts="2018-05-02 13:04:36">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: _"/>
        <msg t="[2]:function return value: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from malloc (IH); or NULL; all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo id="203" ippo="203"/>
    <ppo deps="s" id="96" ippo="96" s="g">
     <e txt="constant value 0 fits in type unsigned int"/>
    </ppo>
    <ppo deps="f" id="195" invs="307" ippo="195" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(r_2_)#init, addrof_localvar_rt_67"/>
    </ppo>
    <ppo deps="f" id="45" invs="320" ippo="45" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addrof_heapregion_1"/>
    </ppo>
    <ppo deps="s" id="54" ippo="54" s="g">
     <e txt="l is a function parameter"/>
    </ppo>
    <ppo deps="f" id="78" invs="165" ippo="78" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="f" id="124" invs="237" ippo="124" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#922"/>
    </ppo>
    <ppo deps="a" id="118" ids="3" invs="21" ippo="118" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition initialized(z-&gt;d) delegated to api"/>
    </ppo>
    <ppo id="140" ippo="140"/>
    <ppo deps="a" id="1" ids="4" invs="21" ippo="1" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition initialized(z-&gt;l) delegated to api"/>
    </ppo>
    <ppo deps="s" id="81" ippo="81" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="128" ippo="128">
     <d>
      <invs>
       <arg a="4" i="124,123,213,237"/>
       <arg a="3" i="86"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:upper-bound expr: (memref-7_174_)#init"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="236" invs="246" ippo="236" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#895"/>
    </ppo>
    <ppo deps="f" id="23" invs="73" ippo="23" s="g" ts="2018-05-02 13:04:36">
     <e txt="initial value of parameter r satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="77" invs="166" ippo="77" s="g" ts="2018-05-02 13:04:36">
     <e txt="lower-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="s" id="242" ippo="242" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="f" id="70" invs="273" ippo="70" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#907"/>
    </ppo>
    <ppo deps="s" id="159" ippo="159" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="a" id="3" ids="5" invs="80" ippo="3" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition not-null(z) delegated to api"/>
    </ppo>
    <ppo deps="s" id="134" ippo="134" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="16" ippo="16" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="f" id="24" invs="73" ippo="24" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is initial value of parameter r satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="a" id="21" ids="6" invs="73" ippo="21" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition not-null(r) delegated to api"/>
    </ppo>
    <ppo deps="s" id="94" ippo="94" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="109" ippo="109">
     <d>
      <invs>
       <arg a="1" i="126,125,381"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:mpz_realloc @917 r:10,freed(by:mpz_realloc @917 r:5,freed(by:mpz_zero_realloc @913 r:10,freed(by:mpz_zero_realloc @913 r:5"/>
        <msg t="[1]:potential frees not excluded: freed(by:mpz_init @-1 r:10,freed(by:mpz_init @-1 r:5,freed(by:mpz_realloc @-1 r:10,freed(by:mpz_realloc @-1 r:5,freed(by:mpz_zero @-1 r:10,freed(by:mpz_zero @-1 r:5,freed(by:mpz_zero_realloc @-1 r:10,freed(by:mpz_zero_realloc @-1 r:5"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="190" ippo="190" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="167" invs="270" ippo="167" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#927"/>
    </ppo>
    <ppo deps="s" id="36" ippo="36" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="76" invs="330" ippo="76" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(r_2_)#init, addrof_localvar_rt_67"/>
    </ppo>
    <ppo deps="s" id="131" ippo="131" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy lowerbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="197" invs="141" ippo="197" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="s" id="231" ippo="231" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="245" invs="157" ippo="245" s="g" ts="2018-05-02 13:04:36">
     <e txt="lower-bound value is return value from malloc (IH); or NULL; all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="f" id="57" invs="269" ippo="57" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#900"/>
    </ppo>
    <ppo deps="f" id="68" invs="60" ippo="68" s="g" ts="2018-05-02 13:04:36">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:memory address: (1)address"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is address of stack variable rt"/>
    </ppo>
    <ppo deps="s" id="156" ippo="156" s="g">
     <e txt="pointer arithmetic stays within memory region"/>
    </ppo>
    <ppo deps="s" id="213" ippo="213" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="122" invs="25" ippo="122" s="g" ts="2018-05-02 13:04:36">
     <e txt="initial value of parameter z satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="181" ippo="181">
     <d>
      <invs>
       <arg a="4" i="148,147,217"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="237" ippo="237" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="85" ippo="85" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="a" id="100" ids="5" invs="81" ippo="100" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition not-null(z) delegated to api"/>
    </ppo>
    <ppo deps="s" id="26" ippo="26" s="g">
     <e txt="d is a function parameter"/>
    </ppo>
    <ppo deps="a" id="98" ids="4" invs="21" ippo="98" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition initialized(z-&gt;l) delegated to api"/>
    </ppo>
    <ppo id="105" ippo="105"/>
    <ppo deps="s" id="214" ippo="214" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
    <ppo deps="s" id="11" ippo="11" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo id="202" ippo="202"/>
    <ppo deps="s" id="9" ippo="9" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="225" invs="282" ippo="225" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#894_xx_assignedAt#907"/>
    </ppo>
    <ppo deps="f" id="247" invs="245" ippo="247" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#913(rv:mpz_zero_realloc)_xx_assignedAt#917(rv:mpz_realloc)_xx_assignedAt#937(rv:mpz_set)_xx_assignedAt#939"/>
    </ppo>
    <ppo deps="s" id="135" ippo="135" s="g">
     <e txt="casting from unsigned int to unsigned long is safe"/>
    </ppo>
    <ppo deps="s" id="13" ippo="13" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
    <ppo deps="f" id="63" invs="31" ippo="63" s="g" ts="2018-05-02 13:04:36">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:memory address: (1)address"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is address of stack variable rt"/>
    </ppo>
    <ppo deps="s" id="220" ippo="220" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
    <ppo deps="s" id="176" ippo="176" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="186" ippo="186">
     <d>
      <invs>
       <arg a="3" i="258"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="51" invs="53" ippo="51" s="g" ts="2018-05-02 13:04:36">
     <e txt="initial value of parameter d satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="107" invs="238" ippo="107" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#919"/>
    </ppo>
    <ppo deps="f" id="146" invs="119" ippo="146" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo id="192" ippo="192"/>
    <ppo deps="f" id="211" invs="277" ippo="211" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#919"/>
    </ppo>
    <ppo id="125" ippo="125">
     <d>
      <invs>
       <arg a="1" i="86"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="a" id="143" ids="6" invs="292" ippo="143" s="g" ts="2018-05-02 13:04:36">
     <e txt="not-null(r) delegated to api"/>
    </ppo>
    <ppo deps="a" id="19" ids="7" invs="27" ippo="19" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition initialized(r-&gt;d) delegated to api"/>
    </ppo>
    <ppo deps="f" id="32" invs="280" ippo="32" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#900(rv:malloc)"/>
    </ppo>
    <ppo deps="f" id="227" invs="175" ippo="227" s="g" ts="2018-05-02 13:04:36">
     <e txt="lower-bound value is value of parameter r (IH); or NULL; all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="s" id="17" ippo="17" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="90" invs="229" ippo="90" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#919"/>
    </ppo>
    <ppo deps="f" id="172" invs="150" ippo="172" s="g" ts="2018-05-02 13:04:36">
     <e txt="lower-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="f" id="228" invs="174" ippo="228" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is value of parameter r (IH); or NULL; all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="f" id="226" invs="342" ippo="226" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(r_2_)#init"/>
    </ppo>
    <ppo deps="a" id="40" ids="1" invs="53" ippo="40" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition not-null(d) delegated to api"/>
    </ppo>
    <ppo deps="f" id="199" invs="253" ippo="199" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#919"/>
    </ppo>
    <ppo deps="f" id="210" invs="251" ippo="210" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#920_xx_assignedAt#928"/>
    </ppo>
    <ppo deps="f" id="67" invs="60" ippo="67" s="g" ts="2018-05-02 13:04:36">
     <e txt="lower-bound value is address of stack variable rt"/>
    </ppo>
    <ppo deps="s" id="55" ippo="55" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="117" ippo="117"/>
    <ppo deps="s" id="132" ippo="132" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy upperbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="110" invs="122" ippo="110" s="g" ts="2018-05-02 13:04:36">
     <e txt="non-negative pointer increment: lower bound for j is 0"/>
    </ppo>
    <ppo deps="s" id="193" ippo="193" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
    <ppo deps="s" id="208" ippo="208" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy lowerbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="60" ippo="60" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
    <ppo deps="s" id="150" ippo="150" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="59" ippo="59" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
    <ppo deps="s" id="165" ippo="165" s="g">
     <e txt="unsigned type: unsigned long"/>
    </ppo>
    <ppo deps="f" id="187" invs="258" ippo="187" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#929"/>
    </ppo>
    <ppo id="244" ippo="244">
     <d>
      <invs>
       <arg a="1" i="157,156,189,264,391"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:mpz_clear @942 r:10,freed(by:mpz_clear @944 r:10,freed(by:mpz_realloc @917 r:10,freed(by:mpz_set @937 r:10,freed(by:mpz_zero_realloc @913 r:10"/>
        <msg t="[1]:potential frees not excluded: freed(by:mpz_clear @-1 r:10,freed(by:mpz_init @-1 r:10,freed(by:mpz_normalize @-1 r:10,freed(by:mpz_realloc @-1 r:10,freed(by:mpz_set @-1 r:10,freed(by:mpz_zero @-1 r:10,freed(by:mpz_zero_realloc @-1 r:10"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="161" ippo="161"/>
    <ppo deps="f" id="196" invs="142" ippo="196" s="g" ts="2018-05-02 13:04:36">
     <e txt="lower-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="f" id="223" invs="161" ippo="223" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="f" id="6" invs="80" ippo="6" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is initial value of parameter z satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="155" ippo="155" s="g">
     <e txt="arguments of pointer arithmetic are checked for null"/>
    </ppo>
    <ppo deps="s" id="142" ippo="142" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
    <ppo deps="f" id="144" invs="292" ippo="144" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(r_2_)#init, addrof_localvar_rt_67"/>
    </ppo>
    <ppo deps="s" id="116" ippo="116" s="g">
     <e txt="casting from unsigned int to unsigned long is safe"/>
    </ppo>
    <ppo deps="s" id="137" ippo="137" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="27" ippo="27" s="g">
     <e txt="casting from unsigned int to unsigned long is safe"/>
    </ppo>
    <ppo id="154" ippo="154">
     <d>
      <invs>
       <arg a="4" i="118,117,211"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="243" invs="263" ippo="243" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#896_xx_assignedAt#900"/>
    </ppo>
    <ppo id="151" ippo="151"/>
    <ppo deps="s" id="157" ippo="157" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy lowerbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="a" id="194" ids="6" invs="307" ippo="194" s="g" ts="2018-05-02 13:04:36">
     <e txt="not-null(r) delegated to api"/>
    </ppo>
    <ppo deps="f" id="38" invs="193" ippo="38" s="g" ts="2018-05-02 13:04:36">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="f" id="61" invs="31" ippo="61" s="g" ts="2018-05-02 13:04:36">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_rt_67"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable rt is pointing to valid memory"/>
    </ppo>
    <ppo deps="s" id="158" ippo="158" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy upperbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="212" ippo="212" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="87" invs="283" ippo="87" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#889"/>
    </ppo>
    <ppo deps="s" id="113" ippo="113" s="g">
     <e txt="pointer arithmetic stays within memory region"/>
    </ppo>
    <ppo deps="s" id="138" ippo="138" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="58" invs="241" ippo="58" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#895"/>
    </ppo>
    <ppo deps="s" id="84" ippo="84" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="a" id="170" ids="6" invs="308" ippo="170" s="g" ts="2018-05-02 13:04:36">
     <e txt="not-null(r) delegated to api"/>
    </ppo>
    <ppo deps="s" id="183" ippo="183" s="g">
     <e txt="pointer arithmetic stays within memory region"/>
    </ppo>
    <ppo deps="f" id="171" invs="308" ippo="171" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(r_2_)#init, addrof_localvar_rt_67"/>
    </ppo>
    <ppo deps="f" id="34" invs="279" ippo="34" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#900"/>
    </ppo>
    <ppo deps="f" id="74" invs="61" ippo="74" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is initial value of parameter r satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="112" ippo="112" s="g">
     <e txt="arguments of pointer arithmetic are checked for null"/>
    </ppo>
    <ppo id="178" ippo="178"/>
    <ppo deps="s" id="75" ippo="75" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
    <ppo deps="f" id="123" invs="25" ippo="123" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is initial value of parameter z satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="48" ippo="48" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="f" id="241" invs="315" ippo="241" s="g" ts="2018-05-02 13:04:36">
     <e txt="all regions pointed at are heap-allocated: [heap-allocated-region created by malloc at line 900]"/>
    </ppo>
    <ppo deps="s" id="169" ippo="169" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
    <ppo deps="f" id="127" invs="124" ippo="127" s="g" ts="2018-05-02 13:04:36">
     <e txt="non-negative pointer increment: lower bound for i is 0"/>
    </ppo>
    <ppo deps="s" id="139" ippo="139" s="g">
     <e txt="casting from unsigned int to unsigned long is safe"/>
    </ppo>
    <ppo deps="f" id="147" invs="237" ippo="147" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#922"/>
    </ppo>
    <ppo deps="a" id="71" ids="6" invs="61" ippo="71" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition not-null(r) delegated to api"/>
    </ppo>
    <ppo deps="f" id="22" invs="334" ippo="22" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(r_2_)#init"/>
    </ppo>
    <ppo deps="s" id="234" ippo="234" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="173" invs="149" ippo="173" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="a" id="215" ids="6" invs="306" ippo="215" s="g" ts="2018-05-02 13:04:36">
     <e txt="not-null(r) delegated to api"/>
    </ppo>
    <ppo deps="f" id="222" invs="162" ippo="222" s="g" ts="2018-05-02 13:04:36">
     <e txt="lower-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="s" id="28" ippo="28" s="g">
     <e txt="l is a function parameter"/>
    </ppo>
    <ppo deps="s" id="53" ippo="53" s="g">
     <e txt="casting from unsigned int to unsigned long is safe"/>
    </ppo>
    <ppo deps="f" id="148" invs="238" ippo="148" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#919"/>
    </ppo>
    <ppo deps="f" id="240" invs="271" ippo="240" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#896_xx_assignedAt#900"/>
    </ppo>
    <ppo deps="f" id="65" invs="60" ippo="65" s="g" ts="2018-05-02 13:04:36">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_rt_67"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable rt is not null"/>
    </ppo>
    <ppo deps="f" id="191" invs="232" ippo="191" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#920_xx_assignedAt#928"/>
    </ppo>
    <ppo deps="f" id="218" invs="136" ippo="218" s="g" ts="2018-05-02 13:04:36">
     <e txt="upper-bound value is address of stack variable rt; or value of parameter r (IH); all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="f" id="47" invs="47" ippo="47" s="g" ts="2018-05-02 13:04:36">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: _"/>
        <msg t="[2]:function return value: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function malloc satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="73" invs="61" ippo="73" s="g" ts="2018-05-02 13:04:36">
     <e txt="initial value of parameter r satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="44" invs="267" ippo="44" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#900"/>
    </ppo>
    <ppo deps="f" id="5" invs="80" ippo="5" s="g" ts="2018-05-02 13:04:36">
     <e txt="initial value of parameter z satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="91" ippo="91" s="g">
     <e txt="l is a function parameter"/>
    </ppo>
    <ppo deps="a" id="120" ids="5" invs="25" ippo="120" s="g" ts="2018-05-02 13:04:36">
     <e txt="condition not-null(z) delegated to api"/>
    </ppo>
    <ppo deps="s" id="184" ippo="184" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy lowerbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="97" invs="281" ippo="97" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#922"/>
    </ppo>
    <ppo deps="f" id="162" invs="266" ippo="162" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#927"/>
    </ppo>
    <ppo deps="s" id="163" ippo="163" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="230" ippo="230" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="72" invs="327" ippo="72" s="g" ts="2018-05-02 13:04:36">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(r_2_)#init"/>
    </ppo>
    <ppo deps="s" id="99" ippo="99" s="g">
     <e txt="z is a function parameter"/>
    </ppo>
    <ppo deps="s" id="114" ippo="114" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy lowerbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="33" ippo="33" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo id="37" ippo="37"/>
    <ppo deps="s" id="64" ippo="64" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
    <ppo deps="s" id="93" ippo="93" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="119" ippo="119" s="g">
     <e txt="z is a function parameter"/>
    </ppo>
    <ppo deps="f" id="175" invs="257" ippo="175" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#919"/>
    </ppo>
    <ppo id="41" ippo="41">
     <d>
      <invs>
       <arg a="4" i="160"/>
       <arg a="3" i="53,88,192,319"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:upper-bound expr: (memref-5_168_)#init"/>
        <msg t="[3]:upper-bound expr: (d_6_)#init"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="233" ippo="233" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="95" ippo="95" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="149" ippo="149" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="198" invs="252" ippo="198" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#922"/>
    </ppo>
    <ppo deps="f" id="232" invs="235" ippo="232" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#937(rv:mpz_set)"/>
    </ppo>
    <ppo deps="s" id="92" ippo="92" s="g">
     <e txt="constant value 0 fits in type unsigned int"/>
    </ppo>
    <ppo deps="s" id="115" ippo="115" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy upperbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="10" ippo="10" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo id="42" ippo="42">
     <d>
      <invs>
       <arg a="1" i="53,88,192,319"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="224" invs="274" ippo="224" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#895"/>
    </ppo>
    <ppo deps="f" id="136" invs="236" ippo="136" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#920_xx_assignedAt#928"/>
    </ppo>
    <ppo deps="s" id="229" ippo="229" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="46" invs="47" ippo="46" s="g" ts="2018-05-02 13:04:36">
     <e txt="return value from function malloc satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="153" invs="118" ippo="153" s="g" ts="2018-05-02 13:04:36">
     <e txt="non-negative pointer increment: lower bound for ((i + j):u_int32_t is 0"/>
    </ppo>
    <ppo deps="s" id="177" ippo="177" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="39" ippo="39">
     <d>
      <invs>
       <arg a="4" i="160"/>
       <arg a="3" i="47,193,268,320"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:upper-bound expr: (malloc(_)#return"/>
        <msg t="[3]:function arguments: _"/>
        <msg t="[3]:function return value: malloc"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="66" invs="60" ippo="66" s="g" ts="2018-05-02 13:04:36">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_rt_67"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable rt is pointing to valid memory"/>
    </ppo>
    <ppo deps="s" id="83" ippo="83" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="207" ippo="207" s="g">
     <e txt="pointer arithmetic stays within memory region"/>
    </ppo>
    <ppo deps="s" id="7" ippo="7" s="g">
     <e txt="l is a function parameter"/>
    </ppo>
    <ppo deps="f" id="88" invs="260" ippo="88" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#917(rv:mpz_realloc)"/>
    </ppo>
    <ppo deps="s" id="35" ippo="35" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="174" invs="256" ippo="174" s="g" ts="2018-05-02 13:04:36">
     <e txt="assignedAt#922"/>
    </ppo>
    <ppo deps="s" id="238" ippo="238" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="29" ippo="29" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="126" ippo="126">
     <d>
      <invs>
       <arg a="1" i="86"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="179" ippo="179"/>
    <ppo deps="s" id="43" ippo="43" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="s" id="86" ippo="86" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="2" ippo="2" s="g">
     <e txt="z is a function parameter"/>
    </ppo>
    <ppo deps="s" id="20" ippo="20" s="g">
     <e txt="r is a function parameter"/>
    </ppo>
   </ppos>
  </function>
 </c-analysis>
