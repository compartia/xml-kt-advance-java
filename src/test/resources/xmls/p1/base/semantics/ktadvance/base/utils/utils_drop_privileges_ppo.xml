<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <header time="2018-01-09 17:29:39">
   <application file="base/utils.c"/>
  </header>
  <function fname="drop_privileges">
   <ppos>
    <ppo deps="f" id="239" invs="125" ippo="239" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="f" id="182" invs="62" ippo="182" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: _"/>
        <msg t="[2]:function return value: getpwnam"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function getpwnam satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="318" ippo="318" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="18" invs="322" ippo="18" s="g" ts="2018-01-09 15:50:14">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(group_4_)#init"/>
    </ppo>
    <ppo deps="f" id="50" invs="262" ippo="50" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3672"/>
    </ppo>
    <ppo deps="f" id="80" invs="112" ippo="80" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter group satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="301" invs="82" ippo="301" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_52"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="104" ippo="104" s="g">
     <e txt="39-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="302" ippo="302" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo id="188" ippo="188">
     <d>
      <invs>
       <arg a="1" i="100,211,331"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="4" ippo="4" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="s" id="219" ippo="219" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="s" id="258" ippo="258" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="103" invs="278" ippo="103" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3689(rv:setgid)"/>
    </ppo>
    <ppo deps="s" id="189" ippo="189" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="102" invs="288" ippo="102" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3650_xx_assignedAt#3674_xx_assignedAt#3684"/>
    </ppo>
    <ppo deps="s" id="272" ippo="272" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="145" ippo="145" s="g">
     <e txt="user is a function parameter"/>
    </ppo>
    <ppo id="15" ippo="15">
     <d>
      <invs>
       <arg a="1" i="56,203,322"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="221" ippo="221" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="180" invs="326" ippo="180" s="g" ts="2018-01-09 15:50:14">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(getpwnam(_)#return"/>
    </ppo>
    <ppo deps="s" id="275" ippo="275" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="121" ippo="121" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="141" ippo="141">
     <d>
      <invs>
       <arg a="1" i="129,218,340"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="216" ippo="216" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="168" ippo="168" s="g">
     <e txt="user is a function parameter"/>
    </ppo>
    <ppo deps="a" id="152" ids="1" invs="90" ippo="152" s="g" ts="2018-01-09 15:50:14">
     <e txt="condition not-null(user) delegated to api"/>
    </ppo>
    <ppo deps="s" id="205" ippo="205" s="g">
     <e txt="user is a function parameter"/>
    </ppo>
    <ppo deps="s" id="8" ippo="8" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="160" invs="90" ippo="160" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter user satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="204" ippo="204" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="235" invs="287" ippo="235" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3650_xx_assignedAt#3674_xx_assignedAt#3684"/>
    </ppo>
    <ppo deps="s" id="246" ippo="246" s="g">
     <e txt="upperbound of constant string argument: 102-character string"/>
    </ppo>
    <ppo deps="s" id="195" ippo="195" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="54" invs="44" ippo="54" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: _"/>
        <msg t="[2]:function return value: getgrnam"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function getgrnam satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="305" ippo="305" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="124" ippo="124" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="a" id="140" ids="1" invs="129" ippo="140" s="g" ts="2018-01-09 15:50:14">
     <e txt="condition not-null(user) delegated to api"/>
    </ppo>
    <ppo deps="s" id="1" ippo="1" s="r">
     <e txt="casting a negative number to an unsigned: -1"/>
    </ppo>
    <ppo deps="s" id="77" ippo="77" s="g">
     <e txt="group is a function parameter"/>
    </ppo>
    <ppo deps="f" id="242" invs="125" ippo="242" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="159" invs="90" ippo="159" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter user satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="3" invs="273" ippo="3" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3664(rv:getuid)"/>
    </ppo>
    <ppo deps="s" id="16" ippo="16" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="21" ippo="21" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="36" ippo="36">
     <d>
      <invs>
       <arg a="1" i="88,208,328"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="131" ippo="131" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="231" ippo="231" s="g">
     <e txt="user is a function parameter"/>
    </ppo>
    <ppo deps="s" id="68" ippo="68" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="213" ippo="213" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="f" id="323" invs="285" ippo="323" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3653_xx_assignedAt#3693_xx_assignedAt#3742"/>
    </ppo>
    <ppo id="122" ippo="122">
     <d>
      <invs>
       <arg a="3" i="283"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="181" invs="62" ippo="181" s="g" ts="2018-01-09 15:50:14">
     <e txt="return value from function getpwnam satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="237" invs="17" ippo="237" s="g" ts="2018-01-09 15:50:14">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="306" ippo="306" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="85" ippo="85" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="f" id="100" invs="274" ippo="100" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3650_xx_assignedAt#3674_xx_assignedAt#3684"/>
    </ppo>
    <ppo deps="s" id="26" ippo="26" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="s" id="105" ippo="105" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="296" ippo="296" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="225" invs="27" ippo="225" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter user satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="247" ippo="247" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="135" ippo="135" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="63" ippo="63" s="g">
     <e txt="upperbound of constant string argument: 43-character string"/>
    </ppo>
    <ppo deps="s" id="279" ippo="279" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="307" ippo="307" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="176" ippo="176" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo id="186" ippo="186">
     <d>
      <invs>
       <arg a="1" i="100,211,331"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="297" ippo="297" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="192" ippo="192" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="211" ippo="211" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="259" ippo="259" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="271" ippo="271" s="g">
     <e txt="upperbound of constant string argument: 72-character string"/>
    </ppo>
    <ppo deps="s" id="125" ippo="125" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="320" ippo="320" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="143" ippo="143">
     <d>
      <invs>
       <arg a="1" i="129,218,340"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="19" invs="56" ippo="19" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter group satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="32" invs="13" ippo="32" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter group satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="227" invs="241" ippo="227" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3716(rv:atoi)"/>
    </ppo>
    <ppo deps="s" id="17" ippo="17" s="g">
     <e txt="group is a function parameter"/>
    </ppo>
    <ppo deps="f" id="172" invs="286" ippo="172" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3704(rv:getpwnam)"/>
    </ppo>
    <ppo deps="f" id="228" invs="255" ippo="228" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3649_xx_assignedAt#3706_xx_assignedAt#3716"/>
    </ppo>
    <ppo id="226" ippo="226">
     <d>
      <invs>
       <arg a="3" i="3,241"/>
      </invs>
      <msgs>
       <msg t="remaining constraint: ((atoi(_)#return &gt;= 0) (--&gt; ((atoi(_)#return &gt;= 0))"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="313" ippo="313">
     <d>
      <invs>
       <arg a="3" i="276"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="199" ippo="199" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="264" ippo="264" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="s" id="269" ippo="269" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="295" ippo="295" s="g">
     <e txt="39-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="117" ippo="117" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="208" invs="100" ippo="208" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter user satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo id="60" ippo="60">
     <d>
      <invs>
       <arg a="1" i="112,213,334"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="150" ippo="150" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="187" ippo="187">
     <d>
      <invs>
       <arg a="3" i="100,211,331"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="244" ippo="244" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="161" invs="263" ippo="161" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3703(rv:strspn)"/>
    </ppo>
    <ppo deps="s" id="142" ippo="142" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="s" id="144" ippo="144" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="137" ippo="137" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="262" ippo="262" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="27" ippo="27">
     <d>
      <invs>
       <arg a="1" i="13,191,300"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="243" ippo="243" s="g">
     <e txt="102-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="157" ippo="157" s="g">
     <e txt="user is a function parameter"/>
    </ppo>
    <ppo deps="s" id="194" ippo="194" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="289" ippo="289" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="s" id="212" ippo="212" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="319" ippo="319" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="s" id="87" ippo="87" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="84" ippo="84" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="183" ippo="183" s="g">
     <e txt="44-character string is a string literal"/>
    </ppo>
    <ppo deps="f" id="171" invs="126" ippo="171" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter user satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="34" invs="253" ippo="34" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3671(rv:strlen)"/>
    </ppo>
    <ppo deps="s" id="274" ippo="274" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="f" id="241" invs="125" ippo="241" s="g" ts="2018-01-09 15:50:14">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="251" ippo="251" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="169" ippo="169">
     <d>
      <invs>
       <arg a="1" i="126,216,338"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:write_to_logs_and_console @-1 r:1"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="281" ippo="281" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="127" ippo="127" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="317" ippo="317" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="22" ippo="22" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="215" ippo="215" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="222" ippo="222" s="g">
     <e txt="user is a function parameter"/>
    </ppo>
    <ppo deps="s" id="286" ippo="286" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="298" ippo="298" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="28" ippo="28" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="148" invs="129" ippo="148" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter user satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="65" invs="114" ippo="65" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_52"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="280" ippo="280" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="44" invs="289" ippo="44" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3672(rv:getgrnam)"/>
    </ppo>
    <ppo deps="s" id="5" ippo="5" s="g">
     <e txt="group is a function parameter"/>
    </ppo>
    <ppo deps="s" id="120" ippo="120" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="184" ippo="184" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="162" invs="264" ippo="162" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3703(rv:strlen)"/>
    </ppo>
    <ppo deps="s" id="72" ippo="72" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="261" ippo="261" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="f" id="33" invs="252" ippo="33" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3671(rv:strspn)"/>
    </ppo>
    <ppo deps="s" id="64" ippo="64" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="292" ippo="292" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="93" ippo="93" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="119" ippo="119" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="175" ippo="175" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="276" ippo="276" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="233" invs="157" ippo="233" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter user satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="92" ippo="92">
     <d>
      <invs>
       <arg a="1" i="23,194,306"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="309" ippo="309" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="10" ippo="10" s="g">
     <e txt="upperbound of constant string argument: 0123456789"/>
    </ppo>
    <ppo deps="f" id="224" invs="27" ippo="224" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter user satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="136" ippo="136" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="254" ippo="254" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="153" ippo="153">
     <d>
      <invs>
       <arg a="1" i="90,210,330"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="39" ippo="39" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="207" invs="100" ippo="207" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter user satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="7" ippo="7" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="88" ippo="88" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="174" invs="279" ippo="174" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3704"/>
    </ppo>
    <ppo deps="s" id="126" ippo="126" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="179" invs="206" ippo="179" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: getpwnam"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="f" id="20" invs="56" ippo="20" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter group satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="315" ippo="315" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="f" id="294" invs="292" ippo="294" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3738(rv:setuid)"/>
    </ppo>
    <ppo deps="s" id="129" ippo="129" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="108" ippo="108" s="g">
     <e txt="upperbound of constant string argument: 39-character string"/>
    </ppo>
    <ppo id="166" ippo="166">
     <d>
      <invs>
       <arg a="1" i="126,216,338"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="130" ippo="130" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="310" ippo="310" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="25" ippo="25">
     <d>
      <invs>
       <arg a="1" i="13,191,300"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="49" ippo="49">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: getgrnam"/>
       <msg t="unknown if location pointed to by return value from getgrnam is initialized"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="52" invs="317" ippo="52" s="g" ts="2018-01-09 15:50:14">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(getgrnam(_)#return"/>
    </ppo>
    <ppo deps="s" id="200" ippo="200" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="250" ippo="250" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="30" invs="300" ippo="30" s="g" ts="2018-01-09 15:50:14">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(group_4_)#init"/>
    </ppo>
    <ppo deps="s" id="62" ippo="62" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="a" id="185" ids="1" invs="100" ippo="185" s="g" ts="2018-01-09 15:50:14">
     <e txt="condition not-null(user) delegated to api"/>
    </ppo>
    <ppo deps="s" id="284" ippo="284" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="106" ippo="106" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="206" ippo="206">
     <d>
      <invs>
       <arg a="1" i="100,211,331"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:write_to_logs_and_console @-1 r:1"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="14" ippo="14" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="s" id="111" ippo="111" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="266" ippo="266" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="277" ippo="277" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="82" ippo="82" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="133" ippo="133" s="g">
     <e txt="user is a function parameter"/>
    </ppo>
    <ppo deps="a" id="89" ids="2" invs="23" ippo="89" s="g" ts="2018-01-09 15:50:14">
     <e txt="condition not-null(group) delegated to api"/>
    </ppo>
    <ppo deps="s" id="291" ippo="291" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="56" ippo="56" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="79" invs="112" ippo="79" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter group satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="a" id="217" ids="1" invs="27" ippo="217" s="g" ts="2018-01-09 15:50:14">
     <e txt="condition not-null(user) delegated to api"/>
    </ppo>
    <ppo deps="s" id="270" ippo="270" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="164" ippo="164">
     <d>
      <invs>
       <arg a="1" i="126,216,338"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="31" invs="13" ippo="31" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter group satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="a" id="12" ids="2" invs="56" ippo="12" s="g" ts="2018-01-09 15:50:14">
     <e txt="condition not-null(group) delegated to api"/>
    </ppo>
    <ppo deps="f" id="101" invs="275" ippo="101" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3687(rv:getegid)"/>
    </ppo>
    <ppo deps="s" id="209" ippo="209" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="s" id="69" ippo="69" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="201" ippo="201" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="203" ippo="203" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="96" invs="23" ippo="96" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter group satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="288" ippo="288" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="45" ippo="45" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="f" id="78" invs="334" ippo="78" s="g" ts="2018-01-09 15:50:14">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(group_4_)#init"/>
    </ppo>
    <ppo deps="s" id="118" ippo="118" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="303" ippo="303" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="81" ippo="81" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="s" id="128" ippo="128" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="f" id="236" invs="281" ippo="236" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3723(rv:initgroups)"/>
    </ppo>
    <ppo deps="s" id="23" ippo="23" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="285" ippo="285" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="f" id="273" invs="150" ippo="273" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_52"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="70" ippo="70" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="134" ippo="134" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="a" id="24" ids="2" invs="13" ippo="24" s="g" ts="2018-01-09 15:50:14">
     <e txt="condition not-null(group) delegated to api"/>
    </ppo>
    <ppo deps="s" id="94" ippo="94" s="g">
     <e txt="group is a function parameter"/>
    </ppo>
    <ppo deps="s" id="109" ippo="109" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="190" ippo="190" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="167" ippo="167" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="76" ippo="76" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="197" ippo="197" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="245" ippo="245" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="a" id="57" ids="2" invs="112" ippo="57" s="g" ts="2018-01-09 15:50:14">
     <e txt="condition not-null(group) delegated to api"/>
    </ppo>
    <ppo deps="s" id="156" ippo="156" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="257" ippo="257" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="299" ippo="299" s="g">
     <e txt="upperbound of constant string argument: 39-character string"/>
    </ppo>
    <ppo id="98" ippo="98">
     <d>
      <invs>
       <arg a="3" i="170,291"/>
      </invs>
      <msgs>
       <msg t="remaining constraint: ((atoi(_)#return &gt;= 0) (--&gt; ((atoi(_)#return &gt;= 0))"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="214" ippo="214" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="11" ippo="11" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="202" ippo="202" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="9" ippo="9" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="13" ippo="13">
     <d>
      <invs>
       <arg a="1" i="56,203,322"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="220" ippo="220">
     <d>
      <invs>
       <arg a="1" i="27,196,308"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="51" invs="200" ippo="51" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: getgrnam"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="107" ippo="107" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="312" ippo="312" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="146" ippo="146">
     <d>
      <invs>
       <arg a="1" i="129,218,340"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:write_to_logs_and_console @-1 r:1"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="249" ippo="249" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="316" ippo="316" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="304" ippo="304" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="90" ippo="90">
     <d>
      <invs>
       <arg a="1" i="23,194,306"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="322" ippo="322" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="268" ippo="268" s="g">
     <e txt="72-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="40" ippo="40" s="g">
     <e txt="group is a function parameter"/>
    </ppo>
    <ppo deps="s" id="210" ippo="210" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="67" ippo="67" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="55" ippo="55" s="g">
     <e txt="43-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="132" ippo="132" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="f" id="110" invs="139" ippo="110" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_52"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="f" id="193" invs="102" ippo="193" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_52"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo id="59" ippo="59">
     <d>
      <invs>
       <arg a="3" i="112,213,334"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="165" ippo="165" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="s" id="321" ippo="321" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="196" ippo="196" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="223" ippo="223">
     <d>
      <invs>
       <arg a="1" i="27,196,308"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:write_to_logs_and_console @-1 r:1"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="314" invs="276" ippo="314" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3649_xx_assignedAt#3706_xx_assignedAt#3716"/>
    </ppo>
    <ppo deps="s" id="6" ippo="6" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo id="155" ippo="155">
     <d>
      <invs>
       <arg a="1" i="90,210,330"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="308" ippo="308" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="116" ippo="116" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="300" ippo="300" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="154" ippo="154" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="s" id="151" ippo="151" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="38" ippo="38">
     <d>
      <invs>
       <arg a="1" i="88,208,328"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="61" ippo="61" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="158" ippo="158">
     <d>
      <invs>
       <arg a="1" i="90,210,330"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:write_to_logs_and_console @-1 r:1"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="113" ippo="113" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="138" ippo="138" s="g">
     <e txt="upperbound of constant string argument: 0123456789"/>
    </ppo>
    <ppo deps="s" id="256" ippo="256" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="278" ippo="278" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="58" ippo="58">
     <d>
      <invs>
       <arg a="1" i="112,213,334"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="170" invs="126" ippo="170" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter user satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="74" ippo="74" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="112" ippo="112" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="178" invs="270" ippo="178" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3704"/>
    </ppo>
    <ppo deps="s" id="255" ippo="255" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="75" ippo="75" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="123" invs="283" ippo="123" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3650_xx_assignedAt#3674_xx_assignedAt#3684"/>
    </ppo>
    <ppo deps="s" id="267" ippo="267" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="48" ippo="48" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="139" ippo="139" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="f" id="147" invs="129" ippo="147" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter user satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="71" ippo="71" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="234" invs="157" ippo="234" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter user satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="173" ippo="173" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="f" id="293" invs="244" ippo="293" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3649_xx_assignedAt#3706_xx_assignedAt#3716"/>
    </ppo>
    <ppo deps="s" id="260" ippo="260" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="f" id="53" invs="44" ippo="53" s="g" ts="2018-01-09 15:50:14">
     <e txt="return value from function getgrnam satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="240" invs="336" ippo="240" s="g" ts="2018-01-09 15:50:14">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="191" ippo="191" s="g">
     <e txt="upperbound of constant string argument: 44-character string"/>
    </ppo>
    <ppo id="218" ippo="218">
     <d>
      <invs>
       <arg a="1" i="27,196,308"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="311" ippo="311" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="47" ippo="47" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="73" ippo="73" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="91" ippo="91" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="s" id="282" ippo="282" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="97" invs="23" ippo="97" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter group satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="a" id="163" ids="1" invs="126" ippo="163" s="g" ts="2018-01-09 15:50:14">
     <e txt="condition not-null(user) delegated to api"/>
    </ppo>
    <ppo deps="s" id="230" ippo="230" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="99" invs="291" ippo="99" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3684(rv:atoi)"/>
    </ppo>
    <ppo deps="s" id="114" ippo="114" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="37" ippo="37" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="s" id="252" ippo="252" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="265" ippo="265" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="248" invs="124" ippo="248" s="g" ts="2018-01-09 15:50:14">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_52"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="f" id="41" invs="328" ippo="41" s="g" ts="2018-01-09 15:50:14">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(group_4_)#init"/>
    </ppo>
    <ppo deps="s" id="283" ippo="283" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="95" invs="306" ippo="95" s="g" ts="2018-01-09 15:50:14">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(group_4_)#init"/>
    </ppo>
    <ppo deps="s" id="149" ippo="149" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="198" ippo="198" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="232" ippo="232">
     <d>
      <invs>
       <arg a="1" i="157,222,344"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:write_to_logs_and_console @-1 r:1"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="115" ippo="115" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="290" ippo="290" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="42" invs="88" ippo="42" s="g" ts="2018-01-09 15:50:14">
     <e txt="initial value of parameter group satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="253" ippo="253" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="287" ippo="287" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="229" invs="254" ippo="229" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3720(rv:geteuid)"/>
    </ppo>
    <ppo deps="f" id="46" invs="266" ippo="46" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3672"/>
    </ppo>
    <ppo id="177" ippo="177">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: getpwnam"/>
       <msg t="unknown if location pointed to by return value from getpwnam is initialized"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="66" ippo="66" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="83" ippo="83" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="a" id="35" ids="2" invs="88" ippo="35" s="g" ts="2018-01-09 15:50:14">
     <e txt="condition not-null(group) delegated to api"/>
    </ppo>
    <ppo deps="s" id="263" ippo="263" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="238" invs="282" ippo="238" s="g" ts="2018-01-09 15:50:14">
     <e txt="assignedAt#3724(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="29" ippo="29" s="g">
     <e txt="group is a function parameter"/>
    </ppo>
    <ppo deps="f" id="43" invs="88" ippo="43" s="g" ts="2018-01-09 15:50:14">
     <e txt="upper-bound value is initial value of parameter group satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="86" ippo="86" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="2" ippo="2" s="r">
     <e txt="casting a negative number to an unsigned: -1"/>
    </ppo>
   </ppos>
  </function>
 </c-analysis>
