<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <header time="2018-01-09 17:28:51">
   <application file="base/utils.c"/>
  </header>
  <function fname="my_system">
   <ppos>
    <ppo id="386" ippo="386"/>
    <ppo deps="s" id="182" ippo="182" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="f" id="427" invs="208" ippo="427" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter cmd satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="588" invs="101" ippo="588" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter early_timeout satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="80" ippo="80" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo id="302" ippo="302"/>
    <ppo deps="f" id="354" invs="451" ippo="354" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2851(rv:strlen)"/>
    </ppo>
    <ppo deps="s" id="557" ippo="667" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="188" invs="94" ippo="188" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter cmd satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="219" ippo="219">
     <d>
      <invs>
       <arg a="1" i="255"/>
      </invs>
      <msgs>
       <msg t="stackvar inv: {assignedAt#2815}"/>
       <msg t="offset: [((sizeof(buffer) - 1):unsigned long]"/>
      </msgs>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="459" ippo="459" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="488" ippo="488" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="102" ippo="102" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="272" invs="53" ippo="272" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_201"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="145" ippo="145" s="g">
     <e txt="output_length is a function parameter"/>
    </ppo>
    <ppo deps="s" id="439" ippo="439" s="g">
     <e txt="158-character string is a string literal"/>
    </ppo>
    <ppo deps="f" id="559" invs="453" ippo="559" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2885_xx_assignedAt#2896_xx_assignedAt#2900"/>
    </ppo>
    <ppo deps="s" id="604" ippo="604" s="g">
     <e txt="index value 0 is non-negative"/>
    </ppo>
    <ppo deps="s" id="15" ippo="15" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo deps="a" id="585" ids="1" invs="101" ippo="585" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(early_timeout) delegated to api"/>
    </ppo>
    <ppo id="221" ippo="221">
     <d>
      <invs>
       <arg a="1" i="255"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:offset: [((sizeof(buffer) - 1):unsigned long]"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="465" invs="16" ippo="465" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter cmd satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="121" ippo="121" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="s" id="425" ippo="425" s="g">
     <e txt="cmd is a function parameter"/>
    </ppo>
    <ppo deps="a" id="548" ids="2" invs="211" ippo="548" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(output) delegated to api"/>
    </ppo>
    <ppo deps="s" id="152" ippo="152" s="g">
     <e txt="arguments of pointer arithmetic are checked for null"/>
    </ppo>
    <ppo deps="s" id="205" ippo="205" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="385" invs="402" ippo="385" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2698"/>
    </ppo>
    <ppo id="160" ippo="160"/>
    <ppo deps="s" id="235" ippo="235" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="246" ippo="246" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="429" invs="433" ippo="429" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2885"/>
    </ppo>
    <ppo deps="s" id="437" ippo="437" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="579" ippo="579">
     <d>
      <invs>
       <arg a="1" i="100,337,494"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:3,freed(by:write_to_logs_and_console @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="54" ippo="54" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="305" ippo="305" s="g">
     <e txt=" value is 1"/>
    </ppo>
    <ppo deps="a" id="140" ids="3" invs="193" ippo="140" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition signed-to-unsigned-cast((int) ((output_length - 1):int: unsigned long) delegated to api"/>
    </ppo>
    <ppo deps="s" id="403" ippo="403" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="581" invs="100" ippo="581" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter exectime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="77" invs="168" ippo="77" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter cmd satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="449" ippo="449" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="242" ippo="242" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="159" ippo="159" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="3" ippo="3" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="f" id="16" invs="509" ippo="16" s="g" ts="2018-01-09 15:49:30">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(output_10_)#init"/>
    </ppo>
    <ppo deps="s" id="21" ippo="668" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="484" ippo="484" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="s" id="521" ippo="521" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="131" ippo="131" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="231" ippo="231" s="g">
     <e txt="index value 1 is less than bound 2"/>
    </ppo>
    <ppo deps="a" id="68" ids="4" invs="22" ippo="68" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition initialized((*early_timeout)) delegated to api"/>
    </ppo>
    <ppo deps="s" id="237" ippo="237" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="85" ippo="85" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="105" ippo="105" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="519" ippo="519" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="563" ippo="563">
     <d>
      <invs>
       <arg a="2" i="195,432"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="247" ippo="247" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="377" ippo="377" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="a" id="63" ids="5" invs="170" ippo="63" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(exectime) delegated to api"/>
    </ppo>
    <ppo deps="s" id="279" ippo="279" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="176" ippo="176" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="186" ippo="186" s="g">
     <e txt="cmd is a function parameter"/>
    </ppo>
    <ppo id="357" ippo="357"/>
    <ppo deps="s" id="297" ippo="297" s="g">
     <e txt="value 8 is less than minimum word size (16"/>
    </ppo>
    <ppo deps="s" id="211" ippo="211" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="433" ippo="433" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="555" ippo="669" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="569" ippo="569">
     <d>
      <invs>
       <arg a="1" i="270,364,538"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:1,freed(by:write_to_logs_and_console @-1 r:1"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="326" ippo="326" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="392" ippo="392">
     <d>
      <invs>
       <arg a="2" i="46,403"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="430" ippo="430" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="f" id="17" invs="131" ippo="17" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter output satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="391" ippo="391"/>
    <ppo deps="s" id="349" ippo="349" s="g">
     <e txt="index value 1 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="434" ippo="434" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="f" id="226" invs="159" ippo="226" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="s" id="313" ippo="313" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="199" ippo="199" s="g">
     <e txt="result of addition is less than or equal to size of the variable buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="264" ippo="264" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="295" ippo="295"/>
    <ppo deps="s" id="328" ippo="328" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="353" ippo="353" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="499" ippo="499" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo id="187" ippo="187">
     <d>
      <invs>
       <arg a="1" i="94,334,491"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:7,freed(by:free_memory @-1 r:7,freed(by:reset_sighandler @-1 r:7,freed(by:set_all_macro_environment_vars @-1 r:7"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="381" ippo="381">
     <d>
      <invs>
       <arg a="1" i="45,328,474"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="550" ippo="550" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="587" invs="101" ippo="587" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter early_timeout satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="a" id="404" ids="6" invs="208" ippo="404" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(cmd) delegated to api"/>
    </ppo>
    <ppo deps="a" id="142" ids="7" invs="192,187" ippo="142" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition int-underflow(((output_length - 1):int, int) delegated to api"/>
    </ppo>
    <ppo deps="s" id="416" ippo="416" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="511" invs="124" ippo="511" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="s" id="262" ippo="262" s="g">
     <e txt="maximum constant value 1023 fits in type int"/>
    </ppo>
    <ppo deps="s" id="389" ippo="389" s="g">
     <e txt="integer can safely be promoted to a floating point type"/>
    </ppo>
    <ppo deps="f" id="27" invs="269" ippo="27" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter early_timeout satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="157" ippo="157" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="289" invs="423" ippo="289" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2809(rv:popen)"/>
    </ppo>
    <ppo deps="s" id="334" ippo="334" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="212" ippo="212" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="395" ippo="395" s="g">
     <e txt="divide by positive number:  value is 1000"/>
    </ppo>
    <ppo deps="s" id="460" ippo="460" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="490" invs="376" ippo="490" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:remaining constraint for lower bound: ((read(_^_^1023)#return &gt;= -2147483648); remaining constraint for upper bound: ((read(_^_^1023)#return &lt;= 2147483647)"/>
       </arg>
      </amsgs>
     </d>
     <e txt="both lower bound: -1 and upper bound 1023 fit in range [-2147483648 - 2147483647]"/>
    </ppo>
    <ppo deps="f" id="364" invs="445" ippo="364" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2704(rv:fork)"/>
    </ppo>
    <ppo deps="s" id="241" ippo="241" s="g">
     <e txt="upperbound of constant string argument: (No output!)"/>
    </ppo>
    <ppo deps="s" id="251" ippo="251" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="330" ippo="330"/>
    <ppo deps="s" id="432" ippo="432" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="169" ippo="169" s="g">
     <e txt="index value 0 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="480" ippo="480" s="g">
     <e txt="result of addition is less than or equal to size of the variable buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo id="562" ippo="562"/>
    <ppo deps="s" id="359" ippo="359" s="g">
     <e txt="index value 1 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="317" ippo="317" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="22" ippo="670" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="215" ippo="215" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="222" ippo="222" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="286" invs="411" ippo="286" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2832(rv:fgets)"/>
    </ppo>
    <ppo deps="s" id="355" ippo="355" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="580" invs="100" ippo="580" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter exectime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="458" ippo="458" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="a" id="441" ids="6" invs="16" ippo="441" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(cmd) delegated to api"/>
    </ppo>
    <ppo deps="s" id="482" ippo="482" s="g">
     <e txt="index value 0 is non-negative"/>
    </ppo>
    <ppo deps="f" id="65" invs="170" ippo="65" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter exectime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="280" ippo="280" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="600" ippo="600" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="44" ippo="44" s="g">
     <e txt="index value 0 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="5" ippo="5" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="120" ippo="120" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="f" id="596" invs="98" ippo="596" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter output satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="365" ippo="365" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="162" ippo="162" s="g">
     <e txt="index value 0 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="539" ippo="539" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="s" id="33" ippo="33" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="f" id="64" invs="522" ippo="64" s="g" ts="2018-01-09 15:49:30">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(exectime_4_)#init"/>
    </ppo>
    <ppo id="564" ippo="564">
     <d>
      <invs>
       <arg a="2" i="195,432"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="292" invs="115" ippo="292" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: popen"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function popen satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="175" ippo="175" s="g">
     <e txt="timeout is a function parameter"/>
    </ppo>
    <ppo deps="f" id="593" invs="97" ippo="593" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter cmd satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="276" ippo="276" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="a" id="92" ids="6" invs="114" ippo="92" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(cmd) delegated to api"/>
    </ppo>
    <ppo deps="s" id="10" ippo="671" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="224" ippo="224" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="540" ippo="540" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo deps="s" id="417" ippo="417" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="153" ippo="153" s="g">
     <e txt="pointer arithmetic stays within memory region"/>
    </ppo>
    <ppo deps="s" id="39" ippo="39" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="387" ippo="387">
     <d>
      <invs>
       <arg a="2" i="47,402"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="398" ippo="398"/>
    <ppo deps="s" id="605" ippo="605" s="g">
     <e txt="index value 0 is less than bound 2"/>
    </ppo>
    <ppo deps="f" id="498" invs="218" ippo="498" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="a" id="583" ids="4" invs="22" ippo="583" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition initialized((*early_timeout)) delegated to api"/>
    </ppo>
    <ppo deps="a" id="126" ids="2" invs="190" ippo="126" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(output) delegated to api"/>
    </ppo>
    <ppo id="591" ippo="591">
     <d>
      <invs>
       <arg a="1" i="97,335,492"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:7,freed(by:write_to_logs_and_console @-1 r:7"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="315" ippo="315" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="294" invs="409" ippo="294" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2835(rv:pclose)"/>
    </ppo>
    <ppo deps="f" id="492" invs="414" ippo="492" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2904"/>
    </ppo>
    <ppo deps="s" id="577" ippo="577" s="g">
     <e txt="exectime is a function parameter"/>
    </ppo>
    <ppo deps="s" id="108" ippo="108" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="310" ippo="310">
     <d>
      <invs>
       <arg a="2" i="149"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="371" ippo="371" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="52" ippo="52" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="491" invs="436" ippo="491" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2904(rv:read)"/>
    </ppo>
    <ppo deps="s" id="333" ippo="333" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="250" ippo="250" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="565" ippo="565" s="g">
     <e txt="casting from int to long is safe"/>
    </ppo>
    <ppo deps="f" id="30" invs="482" ippo="30" s="g" ts="2018-01-09 15:49:30">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(exectime_4_)#init"/>
    </ppo>
    <ppo deps="s" id="185" ippo="185" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="206" ippo="206" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="446" ippo="446" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="14" ippo="14" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="111" ippo="111" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="551" ippo="551" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo deps="s" id="277" ippo="277" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="82" ippo="82" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="487" ippo="487" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="a" id="578" ids="5" invs="100" ippo="578" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(exectime) delegated to api"/>
    </ppo>
    <ppo deps="f" id="89" invs="424" ippo="89" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2704(rv:fork)"/>
    </ppo>
    <ppo deps="f" id="291" invs="115" ippo="291" s="g" ts="2018-01-09 15:49:30">
     <e txt="return value from function popen satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="79" ippo="79" s="g">
     <e txt="null-terminator cast"/>
    </ppo>
    <ppo deps="s" id="217" ippo="217" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="s" id="470" ippo="470" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="534" ippo="534" s="g">
     <e txt="pointer arithmetic stays within memory region"/>
    </ppo>
    <ppo deps="f" id="270" invs="330" ippo="270" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: popen"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="f" id="573" invs="401" ippo="573" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2704(rv:fork)"/>
    </ppo>
    <ppo deps="f" id="31" invs="79" ippo="31" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter exectime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="554" invs="211" ippo="554" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter output satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="a" id="12" ids="2" invs="131" ippo="12" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(output) delegated to api"/>
    </ppo>
    <ppo deps="s" id="209" ippo="209" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="366" ippo="366" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="590" ippo="590" s="g">
     <e txt="cmd is a function parameter"/>
    </ppo>
    <ppo deps="s" id="556" ippo="672" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="476" invs="449" ippo="476" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2885"/>
    </ppo>
    <ppo deps="s" id="303" ippo="303" s="g">
     <e txt="add non-negative number:  value is 1"/>
    </ppo>
    <ppo deps="s" id="81" ippo="81" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="f" id="128" invs="189" ippo="128" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="s" id="356" ippo="356" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="285" invs="54" ippo="285" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: popen"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function popen satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="273" ippo="273" s="g">
     <e txt="adding 1023 to start of variable of size 1024"/>
    </ppo>
    <ppo deps="a" id="70" ids="1" invs="171" ippo="70" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(early_timeout) delegated to api"/>
    </ppo>
    <ppo deps="f" id="134" invs="190" ippo="134" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter output satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="399" ippo="399" s="g">
     <e txt=" value is 8"/>
    </ppo>
    <ppo deps="a" id="509" ids="2" invs="125" ippo="509" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(output) delegated to api"/>
    </ppo>
    <ppo deps="a" id="24" ids="1" invs="269" ippo="24" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(early_timeout) delegated to api"/>
    </ppo>
    <ppo id="94" ippo="94">
     <d>
      <invs>
       <arg a="3" i="114,339,501"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="109" ippo="109" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="167" ippo="167"/>
    <ppo id="407" ippo="407">
     <d>
      <invs>
       <arg a="1" i="208,353,526"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="415" ippo="415" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="507" ippo="507" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="543" ippo="673" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="245" ippo="245" s="g">
     <e txt="constant string with length 12 fits in buffer of size 1024"/>
    </ppo>
    <ppo deps="s" id="57" ippo="57" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="156" ippo="156" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="s" id="421" ippo="421" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="257" ippo="257" s="g">
     <e txt="adding 1023 to start of variable of size 1024"/>
    </ppo>
    <ppo deps="a" id="529" ids="2" invs="241" ippo="529" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(output) delegated to api"/>
    </ppo>
    <ppo deps="s" id="11" ippo="674" s="g">
     <e txt="one of the arguments is a string literal: "/>
    </ppo>
    <ppo deps="s" id="485" ippo="485" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="535" ippo="535" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy lowerbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="420" ippo="420" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="344" invs="263" ippo="344" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo id="552" ippo="552">
     <d>
      <invs>
       <arg a="1" i="211,355,528"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:5,freed(by:write_to_logs_and_console @-1 r:5"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="518" invs="125" ippo="518" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter output satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="375" ippo="375" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="517" invs="125" ippo="517" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter output satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="390" invs="403" ippo="390" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2699"/>
    </ppo>
    <ppo deps="s" id="457" ippo="457" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="249" ippo="249" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="331" ippo="331" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo id="388" ippo="388">
     <d>
      <invs>
       <arg a="2" i="47,402"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="40" ippo="40" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="210" ippo="210" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="599" ippo="599" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="67" ippo="67" s="g">
     <e txt="timeout is a function parameter"/>
    </ppo>
    <ppo deps="s" id="110" ippo="110" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="339" ippo="339">
     <d>
      <invs>
       <arg a="1" i="153"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="345" invs="379" ippo="345" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="4">
        <msg t="[4]:increment is 1024"/>
       </arg>
       <arg a="3">
        <msg t="[3]:index size of buffer is 1024 with offset 0"/>
       </arg>
      </amsgs>
     </d>
     <e txt="increment is less than or equal the size of buffer; satisfies (((0 + 1024) * 1) &lt;= 1024)"/>
    </ppo>
    <ppo deps="s" id="321" ippo="321" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="196" ippo="196" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="314" ippo="314" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="6" ippo="6" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="155" ippo="155" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy upperbound by inductive hypothesis"/>
    </ppo>
    <ppo id="308" ippo="308"/>
    <ppo deps="s" id="483" ippo="483" s="g">
     <e txt="index value 0 is less than bound 2"/>
    </ppo>
    <ppo deps="f" id="592" invs="97" ippo="592" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter cmd satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="116" ippo="116" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo id="530" ippo="530">
     <d>
      <invs>
       <arg a="1" i="241,359,533"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:5,freed(by:write_to_logs_and_console @-1 r:5"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="342" ippo="342" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="348" ippo="348" s="g">
     <e txt="index value 1 is non-negative"/>
    </ppo>
    <ppo deps="s" id="384" ippo="384" s="g">
     <e txt="integer can safely be promoted to a floating point type"/>
    </ppo>
    <ppo deps="s" id="38" ippo="38" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="256" invs="288" ippo="256" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="s" id="374" ippo="374" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="522" ippo="522" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="495" invs="218" ippo="495" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="505" ippo="505" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo deps="f" id="74" invs="431" ippo="74" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2576"/>
    </ppo>
    <ppo deps="s" id="178" ippo="178" s="g">
     <e txt="upperbound of constant string argument: r"/>
    </ppo>
    <ppo deps="s" id="75" ippo="75" s="g">
     <e txt="cmd is a function parameter"/>
    </ppo>
    <ppo deps="s" id="123" ippo="123" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="362" ippo="362" s="g">
     <e txt="index value 1 is non-negative"/>
    </ppo>
    <ppo deps="s" id="558" ippo="675" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="139" ippo="139" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="147" ippo="147" s="g">
     <e txt="subtract non-negative number:  value is 1"/>
    </ppo>
    <ppo deps="s" id="234" ippo="234" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="293" invs="435" ippo="293" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2835(rv:pclose)"/>
    </ppo>
    <ppo deps="s" id="53" ippo="53" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="240" ippo="240" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="372" ippo="372" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="a" id="380" ids="5" invs="45" ippo="380" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(exectime) delegated to api"/>
    </ppo>
    <ppo deps="f" id="218" invs="255" ippo="218" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="f" id="73" invs="171" ippo="73" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter early_timeout satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="373" ippo="373" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="163" ippo="163"/>
    <ppo deps="s" id="230" ippo="230" s="g">
     <e txt="index value 1 is non-negative"/>
    </ppo>
    <ppo deps="f" id="114" invs="114" ippo="114" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter cmd satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="368" ippo="368" s="g">
     <e txt="constant null pointer"/>
    </ppo>
    <ppo deps="s" id="252" ippo="252" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="461" ippo="461" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="547" ippo="676" s="g">
     <e txt="one of the arguments is a string literal: "/>
    </ppo>
    <ppo deps="f" id="283" invs="476" ippo="283" s="g" ts="2018-01-09 15:49:30">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(popen(_^_)#return"/>
    </ppo>
    <ppo id="95" ippo="95">
     <d>
      <invs>
       <arg a="1" i="114,339,501"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="149" ippo="149">
     <d>
      <invs>
       <arg a="1" i="146,345,517"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:5"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="538" invs="441" ippo="538" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2581_xx_assignedAt#2904"/>
    </ppo>
    <ppo id="42" ippo="42"/>
    <ppo deps="s" id="253" ippo="253" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="533" ippo="533" s="g">
     <e txt="arguments of pointer arithmetic are checked for null"/>
    </ppo>
    <ppo deps="s" id="324" ippo="324" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="229" ippo="229"/>
    <ppo deps="s" id="447" ippo="447" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="66" invs="170" ippo="66" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter exectime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="363" ippo="363" s="g">
     <e txt="index value 1 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="340" ippo="340" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="570" invs="270" ippo="570" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter early_timeout satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="239" ippo="239" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="318" invs="78" ippo="318" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="f" id="464" invs="16" ippo="464" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter cmd satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="589" invs="418" ippo="589" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2885_xx_assignedAt#2896_xx_assignedAt#2900"/>
    </ppo>
    <ppo deps="f" id="18" invs="131" ippo="18" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter output satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="50" ippo="50" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="301" ippo="301"/>
    <ppo deps="s" id="104" ippo="104" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="496" invs="531" ippo="496" s="g" ts="2018-01-09 15:49:30">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo id="512" ippo="512">
     <d>
      <invs>
       <arg a="4" i="127"/>
       <arg a="3" i="124"/>
      </invs>
      <msgs>
       <msg t="remaining constraint: (((0 + (output_length_8_)#init) * 1) &lt;= 1024)(simplified to ((output_length_8_)#init &lt;= 1024))"/>
      </msgs>
      <amsgs>
       <arg a="4">
        <msg t="[4]:increment is (output_length_8_)#init"/>
       </arg>
       <arg a="3">
        <msg t="[3]:index size of buffer is 1024 with offset 0"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="a" id="568" ids="1" invs="270" ippo="568" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(early_timeout) delegated to api"/>
    </ppo>
    <ppo deps="s" id="452" ippo="452" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="532" ippo="532">
     <d>
      <invs>
       <arg a="4" i="239"/>
       <arg a="3" i="241,359,533"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:upper-bound expr: (output_10_)#init"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="537" ippo="537" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="s" id="4" ippo="4" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo deps="s" id="258" ippo="258" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="103" ippo="103" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="189" invs="94" ippo="189" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter cmd satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="453" ippo="453" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="378" ippo="378" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo id="444" ippo="444">
     <d>
      <invs>
       <arg a="1" i="16,324,461"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="508" invs="125" ippo="508" s="g" ts="2018-01-09 15:49:30">
     <e txt="passed in expression output cannot overlap with address of local variable buffer"/>
    </ppo>
    <ppo deps="s" id="544" ippo="677" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="477" invs="442" ippo="477" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2885_xx_assignedAt#2896"/>
    </ppo>
    <ppo deps="f" id="478" invs="416" ippo="478" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2885_xx_assignedAt#2896"/>
    </ppo>
    <ppo deps="a" id="180" ids="6" invs="94" ippo="180" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(cmd) delegated to api"/>
    </ppo>
    <ppo deps="s" id="275" ippo="275" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="400" ippo="400" s="g">
     <e txt="value 8 is less than minimum word size (16"/>
    </ppo>
    <ppo deps="f" id="428" invs="208" ippo="428" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter cmd satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="a" id="523" ids="8" invs="128" ippo="523" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition signed-to-unsigned-cast((int) output_length: unsigned long) delegated to api"/>
    </ppo>
    <ppo id="481" ippo="481"/>
    <ppo deps="s" id="528" ippo="528" s="g">
     <e txt="subtract non-negative number:  value is 1"/>
    </ppo>
    <ppo deps="s" id="141" ippo="141" s="g">
     <e txt="output_length is a function parameter"/>
    </ppo>
    <ppo deps="s" id="216" ippo="216" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="414" ippo="414" s="g">
     <e txt="result of addition is less than or equal to size of the variable buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="168" ippo="168" s="g">
     <e txt="index value 0 is non-negative"/>
    </ppo>
    <ppo deps="s" id="520" ippo="520" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="489" ippo="489" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="8" ippo="678" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="204" ippo="204" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="502" ippo="502" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="335" ippo="335" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo id="426" ippo="426">
     <d>
      <invs>
       <arg a="1" i="208,353,526"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:7"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="560" invs="439" ippo="560" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2581_xx_assignedAt#2904"/>
    </ppo>
    <ppo deps="s" id="431" ippo="431" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="f" id="475" invs="434" ippo="475" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2885"/>
    </ppo>
    <ppo deps="s" id="195" ippo="195" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="504" ippo="504" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="f" id="553" invs="211" ippo="553" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter output satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="124" ippo="124" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="370" ippo="370" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="474" ippo="474" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="1" ippo="1" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="332" ippo="332" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="343" ippo="343" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="448" ippo="448" s="g">
     <e txt="upperbound of constant string argument: 158-character string"/>
    </ppo>
    <ppo deps="s" id="419" ippo="419" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="541" ippo="541" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="506" ippo="506" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="602" ippo="602" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="36" ippo="36" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="213" ippo="213" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="s" id="323" ippo="323" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="122" ippo="122" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo id="181" ippo="181">
     <d>
      <invs>
       <arg a="1" i="94,334,491"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="306" ippo="306" s="g">
     <e txt="value 1 is less than minimum word size (16"/>
    </ppo>
    <ppo deps="f" id="382" invs="45" ippo="382" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter exectime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="100" invs="111" ippo="100" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="s" id="402" ippo="402" s="g">
     <e txt="158-character string is a string literal"/>
    </ppo>
    <ppo deps="f" id="26" invs="269" ippo="26" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter early_timeout satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="412" ippo="412" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="296" ippo="296" s="g">
     <e txt=" value is 8"/>
    </ppo>
    <ppo deps="s" id="435" ippo="435" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="225" ippo="225" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="135" invs="190" ippo="135" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter output satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="307" invs="395" ippo="307" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2835(rv:pclose)"/>
    </ppo>
    <ppo id="463" ippo="463">
     <d>
      <invs>
       <arg a="1" i="16,324,461"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:7"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="513" ippo="513">
     <d>
      <invs>
       <arg a="1" i="124"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:offset: [((sizeof(buffer) - 1):unsigned long]"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="192" ippo="192" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="259" ippo="259" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="271" ippo="271"/>
    <ppo deps="f" id="561" invs="432" ippo="561" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2698"/>
    </ppo>
    <ppo deps="f" id="125" invs="190" ippo="125" s="g" ts="2018-01-09 15:49:30">
     <e txt="passed in expression output cannot overlap with address of local variable buffer"/>
    </ppo>
    <ppo deps="s" id="320" ippo="320" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="515" ippo="515" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo deps="s" id="542" ippo="542" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="143" ippo="143" s="g">
     <e txt="subtract non-negative number:  value is 1"/>
    </ppo>
    <ppo deps="s" id="19" ippo="679" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="32" invs="79" ippo="32" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter exectime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="227" invs="373" ippo="227" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="4">
        <msg t="[4]:increment is 1024"/>
       </arg>
       <arg a="3">
        <msg t="[3]:index size of buffer is 1024 with offset 0"/>
       </arg>
      </amsgs>
     </d>
     <e txt="increment is less than or equal the size of buffer; satisfies (((0 + 1024) * 1) &lt;= 1024)"/>
    </ppo>
    <ppo deps="s" id="172" ippo="172" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="228" ippo="228">
     <d>
      <invs>
       <arg a="1" i="159"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:offset: [((sizeof(buffer) - 1):unsigned long]"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="454" ippo="454" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="497" invs="218" ippo="497" s="g" ts="2018-01-09 15:49:30">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="545" ippo="680" s="g">
     <e txt="upperbound of constant string argument: "/>
    </ppo>
    <ppo deps="f" id="606" invs="452" ippo="606" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2820_xx_assignedAt#2839_xx_assignedAt#2841_xx_assignedAt#2844_xx_assignedAt#2885_xx_assignedAt#2896_xx_assignedAt#2900"/>
    </ppo>
    <ppo deps="f" id="269" invs="285" ippo="269" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: popen"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function popen satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="117" ippo="117" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="503" ippo="503" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="s" id="514" ippo="514" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="208" ippo="208" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="525" ippo="525" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo deps="s" id="546" ippo="681" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo id="60" ippo="60"/>
    <ppo deps="a" id="150" ids="9" invs="146,144" ippo="150" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="4">
        <msg t="[4]:lower-bound expr: ((output_length_8_)#init - 1) is external"/>
       </arg>
      </amsgs>
     </d>
     <e txt="condition ptr-lowerbound(((output +i ((output_length - 1):int):char) delegated to api"/>
    </ppo>
    <ppo deps="f" id="244" invs="165" ippo="244" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="s" id="161" ippo="161" s="g">
     <e txt="index value 0 is non-negative"/>
    </ppo>
    <ppo id="405" ippo="405">
     <d>
      <invs>
       <arg a="1" i="208,353,526"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="144" ippo="144" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo deps="s" id="137" ippo="137" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="243" ippo="243" s="g">
     <e txt="one of the arguments is a string literal: (No output!)"/>
    </ppo>
    <ppo deps="f" id="194" invs="447" ippo="194" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2809(rv:popen)"/>
    </ppo>
    <ppo deps="s" id="319" ippo="319" s="g">
     <e txt="result of addition is less than or equal to size of the variable buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="87" ippo="87" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="84" ippo="84" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo id="183" ippo="183">
     <d>
      <invs>
       <arg a="1" i="94,334,491"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="171" ippo="171" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="34" ippo="34" s="g">
     <e txt="cmd is a function parameter"/>
    </ppo>
    <ppo deps="s" id="274" ippo="274" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="418" ippo="418" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="281" ippo="281" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="127" ippo="127">
     <d>
      <invs>
       <arg a="4" i="186"/>
       <arg a="3" i="190,351,524"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:upper-bound expr: (output_10_)#init"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="413" invs="207" ippo="413" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="f" id="298" invs="422" ippo="298" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2841"/>
    </ppo>
    <ppo deps="a" id="576" ids="10" invs="21" ippo="576" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition initialized((*exectime)) delegated to api"/>
    </ppo>
    <ppo deps="s" id="28" ippo="28" s="g">
     <e txt="exectime is a function parameter"/>
    </ppo>
    <ppo deps="a" id="148" ids="2" invs="146" ippo="148" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(output) delegated to api"/>
    </ppo>
    <ppo deps="s" id="325" ippo="325" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="379" ippo="379" s="g">
     <e txt="exectime is a function parameter"/>
    </ppo>
    <ppo deps="s" id="440" ippo="440" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="423" ippo="423" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="184" ippo="184" s="g">
     <e txt="one of the arguments is a string literal: r"/>
    </ppo>
    <ppo deps="s" id="424" ippo="424" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="72" invs="171" ippo="72" s="g" ts="2018-01-09 15:49:30">
     <e txt="initial value of parameter early_timeout satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="261" ippo="261" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="394" ippo="394" s="g">
     <e txt="divide by positive number:  value is 1000"/>
    </ppo>
    <ppo id="93" ippo="93">
     <d>
      <invs>
       <arg a="1" i="114,339,501"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="119" ippo="119" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="338" ippo="338">
     <d>
      <invs>
       <arg a="3" i="153"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="233" ippo="233" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="309" ippo="309" s="g">
     <e txt="add non-negative number:  value is 128"/>
    </ppo>
    <ppo deps="f" id="571" invs="270" ippo="571" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter early_timeout satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo id="361" ippo="361"/>
    <ppo deps="s" id="136" ippo="136" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="254" invs="367" ippo="254" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: popen"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="207" ippo="207" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="456" ippo="456" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="7" ippo="682" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="88" ippo="88" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="501" ippo="501" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="a" id="174" ids="11" invs="220" ippo="174" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition signed-to-unsigned-cast((int) timeout: unsigned int) delegated to api"/>
    </ppo>
    <ppo deps="s" id="367" ippo="367" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="179" ippo="179" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="329" ippo="329" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="350" ippo="350" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="s" id="20" ippo="683" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="352" ippo="352" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="409" ippo="409" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="129" ippo="129">
     <d>
      <invs>
       <arg a="4" i="186"/>
       <arg a="3" i="189"/>
      </invs>
      <msgs>
       <msg t="remaining constraint: (((0 + ((output_length_8_)#init - 1)) * 1) &lt;= 1024)(simplified to (((output_length_8_)#init - 1) &lt;= 1024))"/>
      </msgs>
      <amsgs>
       <arg a="4">
        <msg t="[4]:increment is ((output_length_8_)#init - 1)"/>
       </arg>
       <arg a="3">
        <msg t="[3]:index size of buffer is 1024 with offset 0"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="397" ippo="397"/>
    <ppo deps="f" id="166" invs="426" ippo="166" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2704(rv:fork)"/>
    </ppo>
    <ppo deps="s" id="358" ippo="358" s="g">
     <e txt="index value 1 is non-negative"/>
    </ppo>
    <ppo deps="s" id="376" ippo="376" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo id="130" ippo="130">
     <d>
      <invs>
       <arg a="1" i="189"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:offset: [((sizeof(buffer) - 1):unsigned long]"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="25" invs="537" ippo="25" s="g" ts="2018-01-09 15:49:30">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(early_timeout_2_)#init"/>
    </ppo>
    <ppo deps="f" id="479" invs="67" ippo="479" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="s" id="49" ippo="49" s="g">
     <e txt="address of variable start_time"/>
    </ppo>
    <ppo deps="s" id="369" ippo="369" s="g">
     <e txt="address of variable end_time"/>
    </ppo>
    <ppo deps="s" id="200" ippo="200" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="436" ippo="436" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="62" ippo="62" s="g">
     <e txt="exectime is a function parameter"/>
    </ppo>
    <ppo deps="f" id="284" invs="54" ippo="284" s="g" ts="2018-01-09 15:49:30">
     <e txt="return value from function popen satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="106" ippo="106" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="266" invs="454" ippo="266" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2809(rv:popen)"/>
    </ppo>
    <ppo id="133" ippo="133">
     <d>
      <invs>
       <arg a="1" i="190,351,524"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:5"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="493" invs="219" ippo="493" s="g" ts="2018-01-09 15:49:30">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="56" ippo="56" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="422" ippo="422" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="443" ippo="443">
     <d>
      <invs>
       <arg a="3" i="16,324,461"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="164" ippo="164" s="g">
     <e txt="index value 1 is non-negative"/>
    </ppo>
    <ppo deps="s" id="341" ippo="341" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="101" ippo="101" s="g">
     <e txt="result of addition is less than or equal to size of the variable buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="69" ippo="69" s="g">
     <e txt="early_timeout is a function parameter"/>
    </ppo>
    <ppo deps="s" id="201" ippo="201" s="r">
     <e txt="pointer upper bound offset of 1023 lies outside constant string of length 36"/>
    </ppo>
    <ppo id="574" ippo="574"/>
    <ppo id="346" ippo="346">
     <d>
      <invs>
       <arg a="1" i="263"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="203" ippo="203" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="96" ippo="96" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="288" ippo="288">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: popen"/>
       <msg t="unknown if location pointed to by return value from popen is initialized"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="396" ippo="396" s="g">
     <e txt="value is 1000"/>
    </ppo>
    <ppo id="45" ippo="45"/>
    <ppo deps="f" id="78" invs="168" ippo="78" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter cmd satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="118" ippo="118" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="236" invs="430" ippo="236" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2818(rv:strlen)"/>
    </ppo>
    <ppo deps="s" id="23" ippo="23" s="g">
     <e txt="early_timeout is a function parameter"/>
    </ppo>
    <ppo deps="s" id="411" ippo="411" s="g">
     <e txt="upperbound of constant string argument: 158-character string"/>
    </ppo>
    <ppo deps="f" id="572" invs="446" ippo="572" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2704(rv:fork)"/>
    </ppo>
    <ppo id="337" ippo="337">
     <d>
      <invs>
       <arg a="1" i="153"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="351" ippo="351" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="190" ippo="190" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="393" ippo="393">
     <d>
      <invs>
       <arg a="2" i="46,403"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="76" invs="520" ippo="76" s="g" ts="2018-01-09 15:49:30">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(cmd_12_)#init"/>
    </ppo>
    <ppo deps="s" id="197" ippo="197" s="g">
     <e txt="one of the arguments is a string literal: 36-character string"/>
    </ppo>
    <ppo deps="f" id="360" invs="420" ippo="360" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2820_xx_assignedAt#2839_xx_assignedAt#2841_xx_assignedAt#2844"/>
    </ppo>
    <ppo deps="s" id="526" ippo="526" s="g">
     <e txt="output_length is a function parameter"/>
    </ppo>
    <ppo deps="s" id="566" ippo="566" s="g">
     <e txt="timeout is a function parameter"/>
    </ppo>
    <ppo deps="f" id="299" invs="425" ippo="299" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2835(rv:pclose)"/>
    </ppo>
    <ppo deps="s" id="98" ippo="98" s="g">
     <e txt="upperbound of constant string argument: 56-character string"/>
    </ppo>
    <ppo deps="s" id="214" ippo="214" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="202" ippo="202" s="r">
     <e txt="constant string with length 36 does not have 1023 initialized bytes"/>
    </ppo>
    <ppo deps="s" id="9" ippo="684" s="g">
     <e txt="upperbound of constant string argument: "/>
    </ppo>
    <ppo deps="f" id="450" invs="14" ippo="450" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="a" id="13" ids="12" invs="131,133" ippo="685" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition ptr-upperbound(((output +i 0):char) delegated to api"/>
    </ppo>
    <ppo id="220" ippo="220">
     <d>
      <invs>
       <arg a="3" i="255"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="51" ippo="51" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="107" ippo="107" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="312" ippo="312" s="g">
     <e txt="31-character string is a string literal"/>
    </ppo>
    <ppo id="347" ippo="347"/>
    <ppo deps="a" id="146" ids="7" invs="147,145" ippo="146" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition int-underflow(((output_length - 1):int, int) delegated to api"/>
    </ppo>
    <ppo deps="s" id="473" ippo="473" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="500" ippo="500" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="316" ippo="316" s="g">
     <e txt="upperbound of constant string argument: 31-character string"/>
    </ppo>
    <ppo id="304" ippo="304">
     <d>
      <invs>
       <arg a="3" i="56"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="582" ippo="582" s="g">
     <e txt="timeout is a function parameter"/>
    </ppo>
    <ppo deps="s" id="90" ippo="90" s="g">
     <e txt="56-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="322" ippo="322" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="601" ippo="601" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="268" invs="285" ippo="268" s="g" ts="2018-01-09 15:49:30">
     <e txt="return value from function popen satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="598" ippo="598" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="55" ippo="55" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="132" ippo="132" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo deps="s" id="193" ippo="193" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="a" id="527" ids="7" invs="242,240" ippo="527" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition int-underflow(((output_length - 1):int, int) delegated to api"/>
    </ppo>
    <ppo id="59" ippo="59"/>
    <ppo deps="s" id="165" ippo="165" s="g">
     <e txt="index value 1 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="445" ippo="445" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="466" invs="389" ippo="466" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2885"/>
    </ppo>
    <ppo deps="s" id="223" ippo="223" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="401" invs="440" ippo="401" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2885"/>
    </ppo>
    <ppo deps="f" id="383" invs="45" ippo="383" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter exectime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="410" ippo="410" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="438" invs="448" ippo="438" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2885"/>
    </ppo>
    <ppo deps="s" id="467" ippo="467" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="s" id="300" ippo="300" s="g">
     <e txt="casting from signed char to int is safe"/>
    </ppo>
    <ppo deps="a" id="549" ids="12" invs="211,213" ippo="686" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition ptr-upperbound(((output +i 0):char) delegated to api"/>
    </ppo>
    <ppo deps="s" id="154" ippo="154" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy lowerbound by inductive hypothesis"/>
    </ppo>
    <ppo id="151" ippo="151">
     <d>
      <invs>
       <arg a="4" i="144"/>
       <arg a="3" i="146,345,517"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:upper-bound expr: (output_10_)#init"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="406" ippo="406">
     <d>
      <invs>
       <arg a="3" i="208,353,526"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="a" id="61" ids="10" invs="21" ippo="61" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition initialized((*exectime)) delegated to api"/>
    </ppo>
    <ppo deps="s" id="158" ippo="158" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="472" ippo="472" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="595" ippo="595">
     <d>
      <invs>
       <arg a="1" i="98,338,495"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:5,freed(by:write_to_logs_and_console @-1 r:5"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="575" ippo="575"/>
    <ppo id="113" ippo="113">
     <d>
      <invs>
       <arg a="1" i="114,339,501"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:7"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="138" ippo="138" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="471" ippo="471" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="s" id="278" ippo="278" s="g">
     <e txt="maximum constant value 1023 fits in type int"/>
    </ppo>
    <ppo deps="a" id="531" ids="9" invs="241,239" ippo="531" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="4">
        <msg t="[4]:lower-bound expr: ((output_length_8_)#init - 1) is external"/>
       </arg>
      </amsgs>
     </d>
     <e txt="condition ptr-lowerbound(((output +i ((output_length - 1):int):char) delegated to api"/>
    </ppo>
    <ppo deps="s" id="584" ippo="584" s="g">
     <e txt="early_timeout is a function parameter"/>
    </ppo>
    <ppo deps="s" id="58" ippo="58" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="170" ippo="170" s="g">
     <e txt="my_system_sighandler is global"/>
    </ppo>
    <ppo deps="s" id="112" ippo="112" s="g">
     <e txt="cmd is a function parameter"/>
    </ppo>
    <ppo id="255" ippo="255"/>
    <ppo deps="s" id="468" ippo="468" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="f" id="267" invs="541" ippo="267" s="g" ts="2018-01-09 15:49:30">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(popen(_^_)#return"/>
    </ppo>
    <ppo deps="s" id="48" ippo="48" s="g">
     <e txt="constant null pointer"/>
    </ppo>
    <ppo deps="f" id="494" invs="438" ippo="494" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2903(rv:__errno_location)"/>
    </ppo>
    <ppo deps="f" id="71" invs="521" ippo="71" s="g" ts="2018-01-09 15:49:30">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(early_timeout_2_)#init"/>
    </ppo>
    <ppo deps="s" id="462" ippo="462" s="g">
     <e txt="cmd is a function parameter"/>
    </ppo>
    <ppo deps="s" id="536" ippo="536" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy upperbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="524" ippo="524" s="g">
     <e txt="output_length is a function parameter"/>
    </ppo>
    <ppo deps="s" id="173" ippo="173" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="442" ippo="442">
     <d>
      <invs>
       <arg a="1" i="16,324,461"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="260" ippo="260" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="455" ippo="455" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="586" ippo="586">
     <d>
      <invs>
       <arg a="1" i="101,336,493"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:1,freed(by:write_to_logs_and_console @-1 r:1"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="191" ippo="191" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="311" invs="421" ippo="311" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2835(rv:pclose)"/>
    </ppo>
    <ppo deps="s" id="47" ippo="47" s="g">
     <e txt="index value 1 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="91" ippo="91" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="282" invs="404" ippo="282" s="g" ts="2018-01-09 15:49:30">
     <e txt="assignedAt#2809(rv:popen)"/>
    </ppo>
    <ppo deps="s" id="408" ippo="408" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="97" ippo="97" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="516" ippo="516">
     <d>
      <invs>
       <arg a="1" i="125,342,506"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:broker_system_command @-1 r:5,freed(by:write_to_logs_and_console @-1 r:5"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="510" ippo="510">
     <d>
      <invs>
       <arg a="4" i="127"/>
       <arg a="3" i="125,342,506"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:upper-bound expr: (output_10_)#init"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="594" ippo="594" s="g">
     <e txt="output is a function parameter"/>
    </ppo>
    <ppo deps="s" id="99" ippo="99" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="f" id="37" invs="180" ippo="37" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_fd_35"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable fd is not null"/>
    </ppo>
    <ppo deps="s" id="567" ippo="567" s="g">
     <e txt="early_timeout is a function parameter"/>
    </ppo>
    <ppo deps="s" id="265" ippo="265" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="248" ippo="248" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="327" ippo="327" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="41" ippo="41" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="486" ippo="486" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="198" invs="140" ippo="198" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo deps="s" id="232" ippo="232" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="f" id="115" invs="114" ippo="115" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter cmd satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="290" invs="502" ippo="290" s="g" ts="2018-01-09 15:49:30">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(popen(_^_)#return"/>
    </ppo>
    <ppo deps="f" id="597" invs="98" ippo="597" s="g" ts="2018-01-09 15:49:30">
     <e txt="upper-bound value is initial value of parameter output satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="287" invs="340" ippo="287" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: popen"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="469" ippo="469" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="46" ippo="46" s="g">
     <e txt="index value 1 is non-negative"/>
    </ppo>
    <ppo deps="s" id="177" ippo="177" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="83" ippo="83" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="35" ippo="35" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="263" ippo="263" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="336" invs="153" ippo="336" s="g" ts="2018-01-09 15:49:30">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buffer_85"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buffer is not null"/>
    </ppo>
    <ppo id="603" ippo="603"/>
    <ppo deps="s" id="238" ippo="238" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="a" id="29" ids="5" invs="79" ippo="29" s="g" ts="2018-01-09 15:49:30">
     <e txt="condition not-null(exectime) delegated to api"/>
    </ppo>
    <ppo deps="s" id="451" ippo="451" s="g">
     <e txt="result of addition is less than or equal to size of the variable buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="43" ippo="43" s="g">
     <e txt="index value 0 is non-negative"/>
    </ppo>
    <ppo deps="s" id="86" ippo="86" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="2" ippo="2" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
   </ppos>
  </function>
 </c-analysis>
