<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <header time="2018-01-09 17:41:59">
   <application file="common/downtime.c"/>
  </header>
  <function fname="register_downtime">
   <ppos>
    <ppo id="239" ippo="239"/>
    <ppo id="182" ippo="182">
     <d>
      <invs>
       <arg a="3" i="22"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="318" invs="192" ippo="318" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#285"/>
    </ppo>
    <ppo deps="f" id="18" invs="8" ippo="18" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="50" ippo="50" s="g">
     <e txt="field service_description (172) is assigned a value with a valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="f" id="80" invs="153" ippo="80" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="301" ippo="301" s="g">
     <e txt="casting from int to long is safe"/>
    </ppo>
    <ppo deps="f" id="104" invs="180" ippo="104" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="f" id="302" invs="189" ippo="302" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo id="188" ippo="188">
     <d>
      <invs>
       <arg a="1" i="119,118,179,230"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="4" ippo="4" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="219" invs="179" ippo="219" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#262_xx_assignedAt#264"/>
    </ppo>
    <ppo deps="s" id="258" ippo="258" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="103" ippo="103">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="189" ippo="189">
     <d>
      <invs>
       <arg a="3" i="119,118,179,230"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="102" ippo="102" s="g">
     <e txt="value is 60"/>
    </ppo>
    <ppo id="272" ippo="272"/>
    <ppo deps="s" id="145" ippo="145" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="15" invs="167" ippo="15" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="f" id="221" invs="119" ippo="221" s="g" ts="2018-01-09 16:01:57">
     <e txt="lower-bound value is address of string literal service; or address of string literal host; all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="s" id="180" ippo="180" s="g">
     <e txt="address of variable end_time_string"/>
    </ppo>
    <ppo deps="s" id="275" ippo="275" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo id="121" ippo="121">
     <d>
      <invs>
       <arg a="3" i="128,127,209,276"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="141" ippo="141" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="216" ippo="216" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="168" ippo="168" s="g">
     <e txt="199-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="152" ippo="152" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="205" ippo="205" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="8" ippo="8" s="g">
     <e txt="type is a function parameter"/>
    </ppo>
    <ppo deps="s" id="160" ippo="160" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="204" ippo="204" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="235" ippo="235" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="246" ippo="246" s="g">
     <e txt="field host_name (162) is assigned a value with a valid lower bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="335" ippo="335" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="f" id="195" invs="21" ippo="195" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_83"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="54" ippo="54" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="305" invs="46" ippo="305" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="124" ippo="124" s="g">
     <e txt="address of variable start_time_string"/>
    </ppo>
    <ppo deps="s" id="140" ippo="140" s="g">
     <e txt="upperbound of constant string argument: 131-character string"/>
    </ppo>
    <ppo deps="s" id="1" ippo="1" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo id="77" ippo="77"/>
    <ppo id="242" ippo="242">
     <d>
      <invs>
       <arg a="1" i="126,125,155,205,268"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:get_datetime_string @-1 r:12"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="332" ippo="332" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="343" ippo="343" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="159" ippo="159" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="3" ippo="3" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="f" id="16" invs="130" ippo="16" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="f" id="21" invs="198" ippo="21" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="f" id="36" invs="259" ippo="36" s="g" ts="2018-01-09 16:01:57">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(find_downtime(_^_)#return"/>
    </ppo>
    <ppo id="131" ippo="131">
     <d>
      <invs>
       <arg a="3" i="97"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="231" ippo="231">
     <d>
      <invs>
       <arg a="1" i="60,148,197,261"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3,freed(by:get_datetime_string @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="68" ippo="68">
     <d>
      <invs>
       <arg a="1" i="75,154,203,267"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3,freed(by:get_datetime_string @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="213" ippo="213" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="323" invs="140" ippo="323" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: 4"/>
        <msg t="[2]:function return value: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="offset size 0 is less than the size of (malloc(4)#return (4)"/>
    </ppo>
    <ppo id="122" ippo="122">
     <d>
      <invs>
       <arg a="1" i="128,127,209,276"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="181" ippo="181">
     <d>
      <invs>
       <arg a="1" i="22"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_end_time_string_49"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="237" ippo="237" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="306" invs="46" ippo="306" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="85" ippo="85" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="100" ippo="100" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="26" ippo="26"/>
    <ppo deps="f" id="105" invs="136" ippo="105" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="296" ippo="296" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="225" ippo="225" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="247" ippo="247" s="g">
     <e txt="field host_name (162) is assigned a value with a valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo id="135" ippo="135">
     <d>
      <invs>
       <arg a="1" i="128,127,209,276"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="63" ippo="63" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="279" ippo="279"/>
    <ppo id="307" ippo="307"/>
    <ppo id="176" ippo="176">
     <d>
      <invs>
       <arg a="1" i="23"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_start_time_string_43"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="186" ippo="186" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="297" ippo="297" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="192" ippo="192" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="211" ippo="211" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="259" ippo="259" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="271" ippo="271"/>
    <ppo id="125" ippo="125">
     <d>
      <invs>
       <arg a="1" i="98"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_start_time_string_43"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="320" invs="140" ippo="320" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="143" ippo="143" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="f" id="326" invs="200" ippo="326" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="f" id="19" invs="8" ippo="19" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="32" ippo="32" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="227" ippo="227" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="f" id="17" invs="216" ippo="17" s="g" ts="2018-01-09 16:01:57">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(find_downtime(_^_)#return"/>
    </ppo>
    <ppo id="172" ippo="172">
     <d>
      <invs>
       <arg a="3" i="119,118,179,230"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="228" ippo="228">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="226" ippo="226" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="313" ippo="313">
     <d>
      <invs>
       <arg a="1" i="13,135,176,224"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:add_new_comment @-1 r:3,freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3,freed(by:get_datetime_string @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="199" ippo="199" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="264" ippo="264" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="269" invs="81" ippo="269" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="295" ippo="295" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="117" ippo="117" s="g">
     <e txt="131-character string is a string literal"/>
    </ppo>
    <ppo deps="f" id="208" invs="230" ippo="208" s="g" ts="2018-01-09 16:01:57">
     <e txt="all memory regions potentially pointed at are valid: addrof_string_host, addrof_string_service"/>
    </ppo>
    <ppo id="328" ippo="328">
     <d>
      <invs>
       <arg a="1" i="69,151,200,264"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:add_new_comment @-1 r:3,freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3,freed(by:get_datetime_string @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="60" ippo="60"/>
    <ppo deps="s" id="150" ippo="150" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="187" invs="230" ippo="187" s="g" ts="2018-01-09 16:01:57">
     <e txt="all targets are non-null: [host,service]"/>
    </ppo>
    <ppo deps="f" id="244" invs="125" ippo="244" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_service"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_service"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from find_service (IH); or NULL; all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="s" id="161" ippo="161" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="142" invs="94" ippo="142" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_83"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="144" ippo="144" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="137" ippo="137">
     <d>
      <invs>
       <arg a="1" i="128,127,209,276"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="262" ippo="262" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="27" ippo="27" s="g">
     <e txt="field host_name (172) is assigned a value with a valid lower bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="f" id="243" invs="126" ippo="243" s="g" ts="2018-01-09 16:01:57">
     <e txt="lower-bound value is return value from find_service (IH); or NULL; all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="f" id="157" invs="127" ippo="157" s="g" ts="2018-01-09 16:01:57">
     <e txt="upper-bound value is address of string literal service; or address of string literal host; all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="s" id="194" ippo="194" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="289" ippo="289" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="334" ippo="334" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="212" ippo="212" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="319" invs="186" ippo="319" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#285"/>
    </ppo>
    <ppo id="87" ippo="87"/>
    <ppo deps="s" id="84" ippo="84" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="183" ippo="183">
     <d>
      <invs>
       <arg a="1" i="22"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="171" ippo="171">
     <d>
      <invs>
       <arg a="1" i="119,118,179,230"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="34" invs="194" ippo="34" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="s" id="274" ippo="274" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo id="241" ippo="241">
     <d>
      <invs>
       <arg a="1" i="126,125,155,205,268"/>
      </invs>
      <msgs>
       <msg t="unable to exclude explicit null value"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="251" ippo="251">
     <d>
      <invs>
       <arg a="1" i="126,125,155,205,268"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:get_datetime_string @-1 r:12"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="330" invs="69" ippo="330" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="169" ippo="169" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="281" ippo="281">
     <d>
      <invs>
       <arg a="1" i="123,122,141,188,249"/>
      </invs>
      <msgs>
       <msg t="unable to exclude explicit null value"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="127" ippo="127">
     <d>
      <invs>
       <arg a="1" i="98"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="317" invs="175" ippo="317" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#285(rv:malloc)"/>
    </ppo>
    <ppo deps="f" id="22" invs="149" ippo="22" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="215" ippo="215" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="222" invs="118" ippo="222" s="g" ts="2018-01-09 16:01:57">
     <e txt="upper-bound value is address of string literal service; or address of string literal host; all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="s" id="286" ippo="286" s="g">
     <e txt="field name (155) is assigned a value with a valid lower bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="298" ippo="298" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="28" ippo="28" s="g">
     <e txt="field host_name (172) is assigned a value with a valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="148" ippo="148" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="65" ippo="65" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="280" invs="188" ippo="280" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#232_xx_assignedAt#246(rv:find_host)"/>
    </ppo>
    <ppo id="325" ippo="325">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="44" invs="146" ippo="44" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="5" ippo="347" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="120" ippo="120">
     <d>
      <invs>
       <arg a="1" i="128,127,209,276"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="184" ippo="184" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="162" ippo="162" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="72" ippo="72"/>
    <ppo deps="s" id="261" ippo="261" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="33" ippo="33">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="64" ippo="64" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="292" ippo="292" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="93" invs="57" ippo="93" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="119" invs="276" ippo="119" s="g" ts="2018-01-09 16:01:57">
     <e txt="all targets are non-null: [host,service]"/>
    </ppo>
    <ppo deps="s" id="175" ippo="175" s="g">
     <e txt="address of variable start_time_string"/>
    </ppo>
    <ppo deps="f" id="338" invs="67" ippo="338" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function malloc satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="276" ippo="276" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="f" id="233" invs="60" ippo="233" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="92" invs="57" ippo="92" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="309" ippo="309"/>
    <ppo deps="s" id="10" ippo="10" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="s" id="224" ippo="224" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo id="136" ippo="136">
     <d>
      <invs>
       <arg a="3" i="128,127,209,276"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="254" ippo="254"/>
    <ppo deps="s" id="153" ippo="153" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="39" ippo="39"/>
    <ppo deps="f" id="207" invs="179" ippo="207" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#262_xx_assignedAt#264"/>
    </ppo>
    <ppo deps="s" id="7" ippo="7" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo id="88" ippo="88">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="174" ippo="174" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="126" ippo="126">
     <d>
      <invs>
       <arg a="3" i="98"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="179" ippo="179" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="329" invs="69" ippo="329" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="20" ippo="20">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="315" invs="13" ippo="315" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="294" ippo="294" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="129" ippo="129" s="g">
     <e txt="address of variable end_time_string"/>
    </ppo>
    <ppo deps="f" id="108" invs="24" ippo="108" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="166" invs="128" ippo="166" s="g" ts="2018-01-09 16:01:57">
     <e txt="lower-bound value is address of string literal service; or address of string literal host; all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo id="130" ippo="130">
     <d>
      <invs>
       <arg a="1" i="97"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_end_time_string_49"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="310" ippo="310">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="25" invs="66" ippo="25" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="49" ippo="49" s="g">
     <e txt="field service_description (172) is assigned a value with a valid lower bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="f" id="52" invs="184" ippo="52" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#251(rv:find_service)"/>
    </ppo>
    <ppo deps="s" id="200" ippo="200" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="333" ippo="333" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo id="250" ippo="250">
     <d>
      <invs>
       <arg a="1" i="126,125,155,205,268"/>
      </invs>
      <msgs>
       <msg t="unable to exclude explicit null value"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="30" invs="210" ippo="30" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#246(rv:find_host)"/>
    </ppo>
    <ppo id="62" ippo="62"/>
    <ppo deps="s" id="185" ippo="185" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="284" invs="122" ippo="284" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_host"/>
        <msg t="[2]:function arguments: _"/>
        <msg t="[2]:function return value: find_host"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from find_host (IH); or NULL; all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo id="106" ippo="106">
     <d>
      <invs>
       <arg a="1" i="24,136,180,232"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3,freed(by:get_datetime_string @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="206" ippo="206" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="14" ippo="14">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo id="111" ippo="111">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="266" invs="206" ippo="266" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="s" id="277" ippo="277" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="82" invs="73" ippo="82" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="133" ippo="133" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="89" invs="196" ippo="89" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="s" id="291" ippo="291" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="56" invs="145" ippo="56" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="f" id="79" invs="202" ippo="79" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="f" id="217" invs="177" ippo="217" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#259"/>
    </ppo>
    <ppo deps="f" id="270" invs="81" ippo="270" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="164" invs="209" ippo="164" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#262_xx_assignedAt#264"/>
    </ppo>
    <ppo deps="s" id="341" ippo="341" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="31" ippo="31" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="12" ippo="12" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="101" ippo="101" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="209" invs="119" ippo="209" s="g" ts="2018-01-09 16:01:57">
     <e txt="lower-bound value is address of string literal service; or address of string literal host; all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="f" id="69" invs="75" ippo="69" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="201" ippo="201" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="203" ippo="203" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="96" ippo="96">
     <d>
      <invs>
       <arg a="3" i="55"/>
       <arg a="2" i="195"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="288" ippo="288" s="g">
     <e txt="null-terminator cast"/>
    </ppo>
    <ppo deps="f" id="45" invs="259" ippo="45" s="g" ts="2018-01-09 16:01:57">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(find_downtime(_^_)#return"/>
    </ppo>
    <ppo id="78" ippo="78">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="118" ippo="118" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="303" invs="142" ippo="303" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo id="81" ippo="81">
     <d>
      <invs>
       <arg a="1" i="73,153,202,266"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3,freed(by:get_datetime_string @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="128" ippo="128" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="236" ippo="236" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="f" id="23" invs="262" ippo="23" s="g" ts="2018-01-09 16:01:57">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(find_downtime(_^_)#return"/>
    </ppo>
    <ppo id="285" ippo="285"/>
    <ppo id="273" ippo="273"/>
    <ppo deps="f" id="70" invs="75" ippo="70" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="134" invs="276" ippo="134" s="g" ts="2018-01-09 16:01:57">
     <e txt="all targets are non-null: [host,service]"/>
    </ppo>
    <ppo deps="f" id="337" invs="265" ippo="337" s="g" ts="2018-01-09 16:01:57">
     <e txt="all memory regions potentially pointed at are valid: addrof_heapregion_1"/>
    </ppo>
    <ppo deps="f" id="24" invs="66" ippo="24" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="94" ippo="94"/>
    <ppo deps="s" id="109" ippo="109" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="190" ippo="190">
     <d>
      <invs>
       <arg a="1" i="119,118,179,230"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="167" invs="127" ippo="167" s="g" ts="2018-01-09 16:01:57">
     <e txt="upper-bound value is address of string literal service; or address of string literal host; all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="s" id="76" ippo="76" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="197" ippo="197" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="245" ippo="245"/>
    <ppo id="57" ippo="57">
     <d>
      <invs>
       <arg a="1" i="53,145,193,258"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="156" invs="128" ippo="156" s="g" ts="2018-01-09 16:01:57">
     <e txt="lower-bound value is address of string literal service; or address of string literal host; all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="f" id="257" invs="207" ippo="257" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#276(rv:time)"/>
    </ppo>
    <ppo deps="s" id="299" ippo="299" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="98" ippo="98" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="214" ippo="214" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="11" invs="181" ippo="11" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="s" id="202" ippo="202" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="9" ippo="9" s="g">
     <e txt="downtime_id is a function parameter"/>
    </ppo>
    <ppo deps="s" id="13" ippo="13" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="220" invs="230" ippo="220" s="g" ts="2018-01-09 16:01:57">
     <e txt="all memory regions potentially pointed at are valid: addrof_string_host, addrof_string_service"/>
    </ppo>
    <ppo deps="s" id="51" ippo="51" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="f" id="107" invs="24" ippo="107" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="312" invs="135" ippo="312" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="146" ippo="146" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="249" invs="205" ippo="249" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#233_xx_assignedAt#251(rv:find_service)"/>
    </ppo>
    <ppo id="316" ippo="316"/>
    <ppo id="304" ippo="304">
     <d>
      <invs>
       <arg a="1" i="46,142,189,250"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3,freed(by:get_datetime_string @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="90" invs="147" ippo="90" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="f" id="322" invs="38" ippo="322" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function malloc satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="331" ippo="331" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo id="268" ippo="268">
     <d>
      <invs>
       <arg a="1" i="81,156,206,269"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3,freed(by:get_datetime_string @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="40" ippo="40" s="g">
     <e txt="field host_name (172) is assigned a value with a valid lower bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="f" id="210" invs="118" ippo="210" s="g" ts="2018-01-09 16:01:57">
     <e txt="upper-bound value is address of string literal service; or address of string literal host; all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="f" id="67" invs="154" ippo="67" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="f" id="55" invs="193" ippo="55" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo id="132" ippo="132">
     <d>
      <invs>
       <arg a="1" i="97"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="110" ippo="110" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="193" ippo="193" s="g">
     <e txt="upperbound of constant string argument: 199-character string"/>
    </ppo>
    <ppo deps="f" id="339" invs="152" ippo="339" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: 4"/>
        <msg t="[2]:function return value: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="offset size 0 is less than the size of (malloc(4)#return (4)"/>
    </ppo>
    <ppo deps="f" id="59" invs="53" ippo="59" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="165" invs="276" ippo="165" s="g" ts="2018-01-09 16:01:57">
     <e txt="all memory regions potentially pointed at are valid: addrof_string_host, addrof_string_service"/>
    </ppo>
    <ppo deps="f" id="321" invs="248" ippo="321" s="g" ts="2018-01-09 16:01:57">
     <e txt="all memory regions potentially pointed at are valid: addrof_heapregion_1"/>
    </ppo>
    <ppo deps="s" id="196" ippo="196" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="223" ippo="223" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="f" id="314" invs="13" ippo="314" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="6" ippo="6" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="f" id="155" invs="276" ippo="155" s="g" ts="2018-01-09 16:01:57">
     <e txt="all memory regions potentially pointed at are valid: addrof_string_host, addrof_string_service"/>
    </ppo>
    <ppo id="308" ippo="308"/>
    <ppo deps="f" id="116" invs="50" ippo="116" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="300" ippo="300" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="154" invs="209" ippo="154" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#262_xx_assignedAt#264"/>
    </ppo>
    <ppo deps="s" id="151" ippo="151" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="342" ippo="342" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="38" invs="54" ippo="38" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo id="61" ippo="61"/>
    <ppo deps="s" id="158" ippo="158" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="113" invs="143" ippo="113" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="138" ippo="138" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="256" ippo="256" s="g">
     <e txt="field description (162) is assigned a value with a valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="278" ippo="278" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="58" invs="53" ippo="58" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="170" invs="230" ippo="170" s="g" ts="2018-01-09 16:01:57">
     <e txt="all targets are non-null: [host,service]"/>
    </ppo>
    <ppo deps="s" id="74" ippo="74" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="112" invs="191" ippo="112" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo id="178" ippo="178">
     <d>
      <invs>
       <arg a="1" i="23"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="255" ippo="255" s="g">
     <e txt="field description (162) is assigned a value with a valid lower bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="75" ippo="75" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="123" ippo="123" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="267" invs="156" ippo="267" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo id="48" ippo="48"/>
    <ppo deps="s" id="139" ippo="139" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="147" ippo="147" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="71" ippo="71"/>
    <ppo deps="s" id="234" ippo="234" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo id="173" ippo="173">
     <d>
      <invs>
       <arg a="1" i="119,118,179,230"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="293" invs="190" ippo="293" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#278(rv:time)"/>
    </ppo>
    <ppo deps="s" id="260" ippo="260" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="53" ippo="53" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="240" invs="205" ippo="240" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#233_xx_assignedAt#251(rv:find_service)"/>
    </ppo>
    <ppo deps="s" id="191" ippo="191" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="218" invs="178" ippo="218" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#260"/>
    </ppo>
    <ppo deps="f" id="311" invs="176" ippo="311" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="f" id="47" invs="54" ippo="47" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo id="73" ippo="73"/>
    <ppo id="91" ippo="91">
     <d>
      <invs>
       <arg a="1" i="57,147,196,260"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3,freed(by:get_datetime_string @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="282" ippo="282">
     <d>
      <invs>
       <arg a="1" i="123,122,141,188,249"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:find_service @-1 r:7,freed(by:get_datetime_string @-1 r:7"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="97" ippo="97">
     <d>
      <invs>
       <arg a="3" i="55"/>
       <arg a="2" i="195"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="163" ippo="163" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="230" invs="148" ippo="230" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="99" ippo="99" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="114" ippo="114">
     <d>
      <invs>
       <arg a="1" i="50,143,191,251"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: freed(by:find_host @-1 r:3,freed(by:find_service @-1 r:3,freed(by:get_datetime_string @-1 r:3"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="37" invs="54" ippo="37" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="252" invs="126" ippo="252" s="g" ts="2018-01-09 16:01:57">
     <e txt="lower-bound value is return value from find_service (IH); or NULL; all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="s" id="265" ippo="265" s="g">
     <e txt="casting from int to long is safe"/>
    </ppo>
    <ppo id="248" ippo="248"/>
    <ppo deps="f" id="327" invs="151" ippo="327" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="41" ippo="41" s="g">
     <e txt="field host_name (172) is assigned a value with a valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="f" id="283" invs="123" ippo="283" s="g" ts="2018-01-09 16:01:57">
     <e txt="lower-bound value is return value from find_host (IH); or NULL; all of which satisfy the lower-bound property"/>
    </ppo>
    <ppo deps="f" id="95" invs="195" ippo="95" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#259"/>
    </ppo>
    <ppo deps="s" id="149" ippo="149" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="198" ippo="198" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="232" invs="60" ippo="232" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="115" invs="50" ippo="115" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="290" ippo="290" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo id="42" ippo="42">
     <d>
      <invs/>
      <msgs>
       <msg t="function return value: find_downtime"/>
       <msg t="no function summary for find_downtime"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="253" invs="125" ippo="253" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_service"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_service"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from find_service (IH); or NULL; all of which satisfy the upper-bound property"/>
    </ppo>
    <ppo deps="s" id="287" ippo="287" s="g">
     <e txt="field name (155) is assigned a value with a valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="324" ippo="324" s="g">
     <e txt="downtime_id is a function parameter"/>
    </ppo>
    <ppo deps="f" id="229" invs="197" ippo="229" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="f" id="46" invs="54" ippo="46" s="g" ts="2018-01-09 16:01:57">
     <e txt="return value from function find_downtime satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="177" ippo="177">
     <d>
      <invs>
       <arg a="3" i="23"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="66" invs="203" ippo="66" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="f" id="83" invs="73" ippo="83" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:no function summary for find_downtime"/>
        <msg t="[2]:function arguments: _,_"/>
        <msg t="[2]:function return value: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function find_downtime satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="340" ippo="340" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="35" invs="146" ippo="35" s="g" ts="2018-01-09 16:01:57">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: find_downtime"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="263" ippo="263" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="336" invs="199" ippo="336" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#285"/>
    </ppo>
    <ppo deps="s" id="238" ippo="238" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="29" ippo="29" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="f" id="43" invs="194" ippo="43" s="g" ts="2018-01-09 16:01:57">
     <e txt="assignedAt#240(rv:find_downtime)"/>
    </ppo>
    <ppo deps="s" id="86" ippo="86" s="g">
     <e txt="value is 3600"/>
    </ppo>
    <ppo deps="s" id="2" ippo="2" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
   </ppos>
  </function>
 </c-analysis>
