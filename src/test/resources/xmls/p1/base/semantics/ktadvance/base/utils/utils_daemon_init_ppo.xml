<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <header time="2018-01-09 17:29:35">
   <application file="base/utils.c"/>
  </header>
  <function fname="daemon_init">
   <ppos>
    <ppo deps="s" id="386" ippo="386" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="182" ippo="182"/>
    <ppo deps="f" id="427" invs="543" ippo="427" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="588" ippo="588" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="80" invs="96" ippo="80" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="778" ippo="778" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="s" id="302" ippo="302" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="354" ippo="354"/>
    <ppo deps="s" id="557" ippo="557" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="188" invs="95" ippo="188" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="219" ippo="219" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="459" ippo="459" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="488" ippo="488" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="777" invs="505" ippo="777" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo deps="s" id="102" ippo="102" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="272" ippo="272" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="624" ippo="624" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="799" ippo="799" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="145" invs="111" ippo="145" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="654" invs="521" ippo="654" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="789" ippo="789" s="g">
     <e txt="upperbound of constant string argument: /dev/null"/>
    </ppo>
    <ppo deps="s" id="439" ippo="439" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="559" ippo="559" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="604" invs="491" ippo="604" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3571(rv:fork)"/>
    </ppo>
    <ppo deps="s" id="744" ippo="744" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="15" invs="395" ippo="15" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: getenv"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="585" ippo="585" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="221" ippo="221" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="465" ippo="465" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="746" ippo="746" s="g">
     <e txt="casting from int to long is safe"/>
    </ppo>
    <ppo deps="s" id="639" ippo="639" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="121" ippo="121" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="425" invs="474" ippo="425" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3529(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="780" ippo="780" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="740" ippo="740"/>
    <ppo deps="f" id="548" invs="277" ippo="548" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buf_299"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buf is not null"/>
    </ppo>
    <ppo deps="s" id="152" ippo="152" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="205" invs="498" ippo="205" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3513(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="385" ippo="385" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="160" ippo="160" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="235" ippo="235" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="246" ippo="246" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="f" id="429" invs="116" ippo="429" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="437" ippo="437" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="579" ippo="579" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="54" ippo="54" s="g">
     <e txt=" value is 3"/>
    </ppo>
    <ppo deps="s" id="305" ippo="305" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="622" ippo="622" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="756" ippo="756">
     <d>
      <invs>
       <arg a="3" i="292"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="791" ippo="791" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="140" invs="41" ippo="140" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="f" id="403" invs="250" ippo="403" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="581" ippo="581" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="628" ippo="628"/>
    <ppo deps="f" id="691" invs="29" ippo="691" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="f" id="77" invs="463" ippo="77" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3505(rv:__errno_location)"/>
    </ppo>
    <ppo deps="f" id="449" invs="153" ippo="449" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="242" ippo="242" s="g">
     <e txt="30-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="720" ippo="720" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="159" ippo="159" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="3" ippo="3" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="781" ippo="781" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="16" ippo="16">
     <d>
      <invs>
       <arg a="1" i="203,395,494,556"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="21" invs="556" ippo="21" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(getenv(_)#return"/>
    </ppo>
    <ppo deps="s" id="484" ippo="484" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="521" ippo="521" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="131" ippo="131" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="231" ippo="231" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="68" ippo="68" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="237" invs="459" ippo="237" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3515(rv:__errno_location)"/>
    </ppo>
    <ppo id="767" ippo="767">
     <d>
      <invs>
       <arg a="1" i="75"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buf_299"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo id="85" ippo="85"/>
    <ppo deps="s" id="808" ippo="808" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="105" ippo="105" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="519" ippo="519" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="563" ippo="563" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="247" invs="321" ippo="247" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="377" ippo="377" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo id="650" ippo="650"/>
    <ppo deps="f" id="619" invs="462" ippo="619" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo deps="s" id="63" ippo="843" s="g">
     <e txt="upperbound of constant string argument: "/>
    </ppo>
    <ppo deps="s" id="279" ippo="279" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="776" ippo="776">
     <d>
      <invs>
       <arg a="1" i="255"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="176" invs="128" ippo="176" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="186" ippo="186" s="g">
     <e txt="upperbound of constant string argument: 28-character string"/>
    </ppo>
    <ppo id="357" ippo="357"/>
    <ppo deps="s" id="764" ippo="764" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="297" ippo="297" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="668" ippo="668" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="812" ippo="812" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="615" invs="102" ippo="615" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="211" ippo="211" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="433" ippo="433" s="g">
     <e txt="upperbound of constant string argument: 28-character string"/>
    </ppo>
    <ppo deps="s" id="555" ippo="555" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="786" invs="513" ippo="786" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3617"/>
    </ppo>
    <ppo deps="f" id="634" invs="237" ippo="634" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="569" ippo="569" s="g">
     <e txt="address of variable buf"/>
    </ppo>
    <ppo deps="s" id="326" ippo="326" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="392" ippo="392" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="430" ippo="430" s="g">
     <e txt="28-character string is a string literal"/>
    </ppo>
    <ppo id="627" ippo="627"/>
    <ppo deps="s" id="17" ippo="17" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="s" id="391" ippo="391" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="686" ippo="686" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="f" id="349" invs="533" ippo="349" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="434" ippo="434" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="640" ippo="640" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="710" invs="161" ippo="710" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="226" ippo="226" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="313" ippo="313" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="758" ippo="758" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="199" ippo="199" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="264" invs="229" ippo="264" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="295" ippo="295" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="328" ippo="328" s="g">
     <e txt="upperbound of constant string argument: 35-character string"/>
    </ppo>
    <ppo deps="s" id="792" ippo="792" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="754" ippo="754" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="353" ippo="353" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="787" ippo="787" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="499" ippo="499" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="187" ippo="187" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="f" id="381" invs="563" ippo="381" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="550" ippo="550" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="587" ippo="587" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="404" invs="561" ippo="404" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="f" id="142" invs="111" ippo="142" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="416" ippo="416" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="511" ippo="511" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="262" invs="560" ippo="262" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="f" id="389" invs="66" ippo="389" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="27" ippo="27" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="645" ippo="645" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="755" invs="292" ippo="755" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buf_299"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buf is not null"/>
    </ppo>
    <ppo deps="s" id="157" ippo="157" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="289" ippo="289" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="334" ippo="334" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="212" ippo="212"/>
    <ppo deps="s" id="395" ippo="395" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="460" ippo="460" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="490" ippo="490" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="730" ippo="730" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="364" ippo="364" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="241" invs="79" ippo="241" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="251" ippo="251" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="330" invs="171" ippo="330" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="432" ippo="432" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="169" ippo="169" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="480" ippo="480" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="562" ippo="562" s="g">
     <e txt="47-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="359" ippo="359" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="317" invs="538" ippo="317" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="f" id="22" invs="203" ippo="22" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function getenv satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="215" ippo="215"/>
    <ppo deps="s" id="222" ippo="222" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="286" invs="172" ippo="286" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="355" ippo="355"/>
    <ppo deps="s" id="580" ippo="580" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="617" invs="102" ippo="617" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="458" invs="127" ippo="458" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="441" ippo="441" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="482" ippo="482" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="65" ippo="844" s="g">
     <e txt="one of the arguments is a string literal: "/>
    </ppo>
    <ppo deps="s" id="280" ippo="280" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="600" ippo="600"/>
    <ppo deps="s" id="44" ippo="44" s="g">
     <e txt="value 3 is less than minimum word size (16"/>
    </ppo>
    <ppo deps="s" id="5" ippo="5" s="g">
     <e txt="upperbound of constant string argument: HOME"/>
    </ppo>
    <ppo deps="s" id="120" ippo="120" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="596" ippo="596" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="365" ippo="365" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="162" ippo="162" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="539" ippo="539" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="33" ippo="33" s="g">
     <e txt="upperbound of constant string argument: /"/>
    </ppo>
    <ppo deps="s" id="64" ippo="845" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo id="564" ippo="564"/>
    <ppo deps="s" id="673" ippo="673" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo id="292" ippo="292"/>
    <ppo deps="f" id="175" invs="545" ippo="175" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="593" ippo="593" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="276" ippo="276" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="651" invs="10" ippo="651" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="f" id="92" invs="302" ippo="92" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="790" ippo="790" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="10" ippo="10" s="g">
     <e txt="daemon_dumps_core is global"/>
    </ppo>
    <ppo deps="s" id="224" ippo="224" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="540" ippo="540" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="417" ippo="417" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="804" ippo="804" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="153" ippo="153" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="727" invs="551" ippo="727" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(strerror(_)#return"/>
    </ppo>
    <ppo deps="s" id="39" ippo="39" s="g">
     <e txt=" value is 3"/>
    </ppo>
    <ppo deps="s" id="387" ippo="387" s="g">
     <e txt="upperbound of constant string argument: 25-character string"/>
    </ppo>
    <ppo deps="s" id="398" ippo="398" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="605" invs="508" ippo="605" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3571(rv:fork)"/>
    </ppo>
    <ppo deps="s" id="671" ippo="671" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="498" ippo="498" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="583" ippo="583" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="721" ippo="721" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="126" ippo="126" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="689" invs="30" ippo="689" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="591" ippo="591" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="f" id="315" invs="467" ippo="315" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3521(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="637" ippo="637" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="807" ippo="807" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="294" ippo="294" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="492" ippo="492" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="577" invs="214" ippo="577" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="f" id="108" invs="42" ippo="108" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="310" ippo="310" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="371" ippo="371" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="623" ippo="623" s="g">
     <e txt="47-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="52" ippo="52" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="491" ippo="491" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="785" invs="512" ippo="785" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo deps="s" id="333" ippo="333" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="703" ippo="703">
     <d>
      <invs>
       <arg a="1" i="158,391,488,551"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="250" ippo="250" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="565" ippo="565"/>
    <ppo id="626" ippo="626"/>
    <ppo deps="s" id="30" ippo="30" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="185" ippo="185" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="707" ippo="707" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="206" invs="221" ippo="206" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="446" ippo="446" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="14" ippo="14" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="111" invs="562" ippo="111" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="f" id="783" invs="510" ippo="783" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo deps="s" id="551" ippo="551" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="277" ippo="277" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="729" invs="158" ippo="729" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: _"/>
        <msg t="[2]:function return value: strerror"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function strerror satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="82" ippo="82" s="g">
     <e txt="%s is a directory ; is a string literal"/>
    </ppo>
    <ppo deps="s" id="487" ippo="487" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="728" invs="158" ippo="728" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function strerror satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="578" ippo="578" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="89" ippo="89" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="695" ippo="695" s="g">
     <e txt="45-character string is a string literal"/>
    </ppo>
    <ppo id="291" ippo="291"/>
    <ppo deps="f" id="79" invs="537" ippo="79" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="217" ippo="217" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="470" invs="147" ippo="470" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="f" id="534" invs="408" ippo="534" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:remaining constraint for lower bound: ((read(_^_^10)#return &gt;= -2147483648); remaining constraint for upper bound: ((read(_^_^10)#return &lt;= 2147483647)"/>
       </arg>
      </amsgs>
     </d>
     <e txt="both lower bound: -1 and upper bound 10 fit in range [-2147483648 - 2147483647]"/>
    </ppo>
    <ppo deps="f" id="270" invs="58" ippo="270" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="573" ippo="573" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="810" ippo="810" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="31" ippo="31" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="554" ippo="554" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="12" invs="492" ippo="12" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3493(rv:getenv)"/>
    </ppo>
    <ppo id="666" ippo="666"/>
    <ppo deps="s" id="715" ippo="715" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="209" invs="221" ippo="209" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo id="699" ippo="699"/>
    <ppo deps="s" id="366" ippo="366" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="590" ippo="590" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo id="665" ippo="665"/>
    <ppo deps="s" id="556" ippo="556" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="642" ippo="642" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="476" ippo="476" s="g">
     <e txt="31-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="303" ippo="303" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="712" ippo="712" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="81" invs="96" ippo="81" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="128" ippo="128" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="356" ippo="356"/>
    <ppo deps="f" id="285" invs="552" ippo="285" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="f" id="672" invs="26" ippo="672" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="273" ippo="273" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="70" ippo="70" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="134" ippo="134" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="399" ippo="399" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="509" ippo="509" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="24" ippo="24" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="94" ippo="94" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="109" invs="509" ippo="109" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3507(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="167" ippo="167" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="407" ippo="407" s="g">
     <e txt="No space on device ; is a string literal"/>
    </ppo>
    <ppo deps="s" id="798" ippo="798" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="415" ippo="415" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="507" invs="269" ippo="507" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="543" ippo="543" s="g">
     <e txt="casting a pointer to integer type int"/>
    </ppo>
    <ppo deps="s" id="610" ippo="610" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="245" ippo="245" s="g">
     <e txt="upperbound of constant string argument: 30-character string"/>
    </ppo>
    <ppo deps="s" id="750" ippo="750" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="57" ippo="57" s="g">
     <e txt="value 3 is less than minimum word size (16"/>
    </ppo>
    <ppo deps="f" id="156" invs="191" ippo="156" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="421" ippo="421" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="257" ippo="257" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="529" ippo="529" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="s" id="669" ippo="669" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="11" ippo="11" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="s" id="485" ippo="485" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="535" invs="464" ippo="535" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3548(rv:read)"/>
    </ppo>
    <ppo deps="s" id="420" ippo="420" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="344" ippo="344" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="552" ippo="552" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="518" ippo="518" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="s" id="375" ippo="375" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="f" id="517" invs="511" ippo="517" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3539(rv:getpid)"/>
    </ppo>
    <ppo deps="s" id="390" ippo="390" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="457" ippo="457" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="725" ippo="725" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="249" ippo="249" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="331" ippo="331" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="f" id="693" invs="29" ippo="693" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="388" ippo="388" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="40" ippo="40" s="g">
     <e txt="value 3 is less than minimum word size (16"/>
    </ppo>
    <ppo deps="s" id="210" ippo="210" s="g">
     <e txt="29-character string is a string literal"/>
    </ppo>
    <ppo deps="f" id="599" invs="477" ippo="599" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3548_xx_assignedAt#3556(rv:sscanf)"/>
    </ppo>
    <ppo deps="s" id="67" ippo="846" s="g">
     <e txt="constant string with length 0 fits in temp_buffer of size 1024"/>
    </ppo>
    <ppo deps="s" id="685" ippo="685" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="738" ippo="738" s="g">
     <e txt="constant value 0 fits in type unsigned long"/>
    </ppo>
    <ppo deps="f" id="110" invs="261" ippo="110" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="339" ippo="339" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="345" ippo="345" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="321" ippo="321" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="667" ippo="667" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="762" ippo="762" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="779" ippo="779" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="196" ippo="196" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="314" invs="35" ippo="314" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="681" ippo="681" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="6" ippo="6" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="155" ippo="155" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="308" ippo="308" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="483" ippo="483" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="592" ippo="592" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo id="116" ippo="116"/>
    <ppo deps="s" id="530" ippo="530" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="342" ippo="342" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="f" id="348" invs="33" ippo="348" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="384" ippo="384" s="g">
     <e txt="25-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="675" ippo="675" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="38" ippo="38" s="g">
     <e txt="casting the result of a bitwise manipulation to an unsigned"/>
    </ppo>
    <ppo deps="s" id="256" ippo="256" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="374" ippo="374" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="522" ippo="522" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="s" id="495" ippo="495" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="505" ippo="505" s="g">
     <e txt="upperbound of constant string argument: 79-character string"/>
    </ppo>
    <ppo deps="s" id="801" ippo="801" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="74" ippo="847" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="178" ippo="178" s="g">
     <e txt="28-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="75" ippo="848" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="123" ippo="123" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="635" ippo="635" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="f" id="362" invs="247" ippo="362" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="558" ippo="558" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="800" ippo="800" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="139" ippo="139" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="147" ippo="147" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="724" ippo="724" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="234" ippo="234" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="713" ippo="713" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="293" ippo="293"/>
    <ppo deps="s" id="649" ippo="649" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="53" ippo="53" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="f" id="240" invs="79" ippo="240" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="372" ippo="372" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="380" invs="294" ippo="380" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="218" ippo="218" s="g">
     <e txt="upperbound of constant string argument: 29-character string"/>
    </ppo>
    <ppo deps="s" id="752" ippo="752" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="802" ippo="802" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="73" ippo="849" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="373" ippo="373" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="765" invs="514" ippo="765" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3612(rv:getpid)"/>
    </ppo>
    <ppo deps="s" id="723" ippo="723" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="163" ippo="163" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="230" ippo="230" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="114" ippo="114" s="g">
     <e txt="43-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="368" ippo="368" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="252" ippo="252" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="461" ippo="461" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="547" ippo="547" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="f" id="782" invs="506" ippo="782" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3613(rv:strlen)"/>
    </ppo>
    <ppo deps="s" id="647" ippo="647" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="f" id="283" invs="489" ippo="283" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3519(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="660" ippo="660" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="95" ippo="95" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="149" ippo="149"/>
    <ppo deps="s" id="538" ippo="538" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="636" ippo="636" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="42" ippo="42" s="g">
     <e txt="value 3 is less than minimum word size (16"/>
    </ppo>
    <ppo deps="s" id="253" ippo="253" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="533" ippo="533" s="g">
     <e txt="constant value 10 fits in type unsigned long"/>
    </ppo>
    <ppo deps="s" id="631" ippo="631" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="324" ippo="324"/>
    <ppo deps="s" id="736" ippo="736" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="766" invs="75" ippo="766" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buf_299"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buf is not null"/>
    </ppo>
    <ppo deps="s" id="229" ippo="229" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="447" invs="125" ippo="447" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="677" ippo="677" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="66" invs="223" ippo="66" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="363" ippo="363" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="340" ippo="340" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="662" ippo="662" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="745" invs="445" ippo="745" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo deps="s" id="811" ippo="811" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo id="570" ippo="570">
     <d>
      <invs>
       <arg a="1" i="212"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buf_299"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="678" ippo="678" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="784" invs="471" ippo="784" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3616(rv:fcntl)"/>
    </ppo>
    <ppo deps="s" id="795" ippo="795" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="239" invs="535" ippo="239" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="f" id="318" invs="101" ippo="318" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="464" ippo="464" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="589" ippo="589" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="737" ippo="737" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="18" ippo="18">
     <d>
      <invs>
       <arg a="1" i="203,395,494,556"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="50" ippo="50" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="301" ippo="301" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="806" ippo="806" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="104" ippo="104" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="496" ippo="496" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="512" ippo="512" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="568" ippo="568" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="452" invs="153" ippo="452" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="532" ippo="532" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="537" ippo="537" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="4" ippo="4" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="726" invs="488" ippo="726" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3594(rv:strerror)"/>
    </ppo>
    <ppo deps="s" id="797" ippo="797" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="258" ippo="258" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="749" ippo="749" s="g">
     <e txt="%d ; is a string literal"/>
    </ppo>
    <ppo deps="s" id="103" ippo="103" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="189" ippo="189" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="453" ippo="453" s="g">
     <e txt="32-character string is a string literal"/>
    </ppo>
    <ppo deps="f" id="694" invs="29" ippo="694" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="378" invs="67" ippo="378" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="444" ippo="444" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="508" ippo="508" s="g">
     <e txt="adding the size of a variable to the start of the same variable temp_buffer"/>
    </ppo>
    <ppo deps="s" id="544" ippo="544" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="733" ippo="733" s="g">
     <e txt="daemon_dumps_core is global"/>
    </ppo>
    <ppo deps="s" id="477" ippo="477" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="478" ippo="478" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="743" ippo="743" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="180" ippo="180"/>
    <ppo deps="s" id="275" ippo="275" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="400" ippo="400" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="428" invs="116" ippo="428" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="523" ippo="523" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="481" invs="149" ippo="481" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="f" id="528" invs="490" ippo="528" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo deps="f" id="690" invs="444" ippo="690" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3594(rv:__errno_location)"/>
    </ppo>
    <ppo id="768" ippo="768">
     <d>
      <invs>
       <arg a="3" i="75"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="141" invs="469" ippo="141" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3509(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="216" ippo="216" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="414" ippo="414" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="682" ippo="682" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="168" ippo="168" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="520" ippo="520" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="489" ippo="489" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="774" invs="255" ippo="774" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buf_299"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buf is not null"/>
    </ppo>
    <ppo deps="s" id="8" ippo="8" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="204" invs="39" ippo="204" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="502" ippo="502" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="335" ippo="335" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="426" invs="116" ippo="426" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="560" ippo="560" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="431" ippo="431" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="475" invs="205" ippo="475" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="195" ippo="195" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="731" ippo="731" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="504" ippo="504" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="553" ippo="553" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="124" invs="136" ippo="124" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="370" ippo="370" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="474" invs="205" ippo="474" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="803" ippo="803" s="g">
     <e txt="upperbound of constant string argument: /dev/null"/>
    </ppo>
    <ppo deps="s" id="1" ippo="1" s="g">
     <e txt="null-terminator cast"/>
    </ppo>
    <ppo deps="s" id="757" ippo="757" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="656" invs="9" ippo="656" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="613" invs="11" ippo="613" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="332" ippo="332" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="343" ippo="343" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="f" id="608" invs="497" ippo="608" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo deps="f" id="448" invs="486" ippo="448" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3531(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="419" ippo="419" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="753" ippo="753" s="g">
     <e txt="upperbound of constant string argument: %d ;"/>
    </ppo>
    <ppo deps="f" id="541" invs="502" ippo="541" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3548"/>
    </ppo>
    <ppo deps="s" id="506" ippo="506" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="f" id="602" invs="481" ippo="602" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3565(rv:getpid)"/>
    </ppo>
    <ppo deps="s" id="36" ippo="36" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="717" ippo="717" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="213" ippo="213"/>
    <ppo id="323" ippo="323"/>
    <ppo deps="s" id="644" ippo="644" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="684" ippo="684" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="122" ippo="122" s="g">
     <e txt="upperbound of constant string argument: 43-character string"/>
    </ppo>
    <ppo id="181" ippo="181"/>
    <ppo deps="s" id="306" ippo="306" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="382" invs="294" ippo="382" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="638" ippo="638" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="100" ippo="100" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="402" invs="503" ippo="402" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3527(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="26" ippo="26" s="g">
     <e txt="upperbound of constant string argument: /"/>
    </ppo>
    <ppo deps="f" id="412" invs="286" ippo="412" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="296" ippo="296" s="g">
     <e txt="upperbound of constant string argument: 34-character string"/>
    </ppo>
    <ppo deps="f" id="435" invs="202" ippo="435" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="225" ippo="225" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="135" ippo="135" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="658" ippo="658" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="307" ippo="307" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="463" ippo="463" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="513" ippo="513" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="793" ippo="793" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="192" ippo="192" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="259" invs="37" ippo="259" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="271" ippo="271" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="f" id="561" invs="516" ippo="561" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3556(rv:sscanf)"/>
    </ppo>
    <ppo deps="s" id="125" ippo="125" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="320" ippo="320" s="g">
     <e txt="35-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="515" ippo="515" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="676" ippo="676" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="542" ippo="542" s="g">
     <e txt="%d is a string literal"/>
    </ppo>
    <ppo deps="f" id="143" invs="540" ippo="143" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="19" ippo="19" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="32" ippo="32" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="227" ippo="227" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="172" invs="40" ippo="172" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="228" ippo="228" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="454" ippo="454" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="497" ippo="497" s="g">
     <e txt="casting constant value 0 to char"/>
    </ppo>
    <ppo deps="s" id="545" ippo="545" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="606" ippo="606" s="g">
     <e txt="casting from int to long is safe"/>
    </ppo>
    <ppo deps="s" id="269" ippo="269" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo id="117" ippo="117"/>
    <ppo deps="s" id="503" ippo="503" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="514" ippo="514" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="208" invs="221" ippo="208" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="525" ippo="525" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="546" ippo="546" s="g">
     <e txt="upperbound of constant string argument: %d"/>
    </ppo>
    <ppo deps="f" id="60" invs="483" ippo="60" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo id="150" ippo="150"/>
    <ppo deps="s" id="244" ippo="244" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="607" ippo="607" s="g">
     <e txt="casting from int to long is safe"/>
    </ppo>
    <ppo deps="s" id="161" ippo="161" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="405" invs="250" ippo="405" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="759" ippo="759" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="144" invs="111" ippo="144" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="706" ippo="706" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="137" ippo="137" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="243" ippo="243" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="194" ippo="194" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="629" ippo="629" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="702" invs="158" ippo="702" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: strerror"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from strerror is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="741" ippo="741" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="319" invs="101" ippo="319" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo id="87" ippo="87"/>
    <ppo deps="s" id="683" ippo="683" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="751" ippo="751" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="84" ippo="84"/>
    <ppo id="183" ippo="183"/>
    <ppo deps="s" id="171" ippo="171" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="34" ippo="34" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="274" ippo="274" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="418" ippo="418" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="281" ippo="281" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="127" ippo="127" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="614" invs="468" ippo="614" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3589(rv:__errno_location)"/>
    </ppo>
    <ppo id="705" ippo="705">
     <d>
      <invs>
       <arg a="1" i="158,391,488,551"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="748" ippo="748" s="g">
     <e txt="casting from int to long is safe"/>
    </ppo>
    <ppo deps="s" id="413" ippo="413" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="708" ippo="708" s="g">
     <e txt="upperbound of constant string argument: 45-character string"/>
    </ppo>
    <ppo deps="s" id="805" ippo="805" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="298" invs="110" ippo="298" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="788" ippo="788" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="576" ippo="576" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo id="700" ippo="700"/>
    <ppo deps="s" id="28" ippo="28" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="148" ippo="148"/>
    <ppo id="325" ippo="325"/>
    <ppo deps="f" id="379" invs="515" ippo="379" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3525(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="440" ippo="440" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="423" ippo="423" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="184" ippo="184" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="424" invs="117" ippo="424" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="72" ippo="850" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="261" invs="229" ippo="261" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="394" ippo="394" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="93" ippo="93" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo id="119" ippo="119"/>
    <ppo deps="s" id="338" ippo="338" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="701" ippo="701" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="233" ippo="233" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="309" ippo="309" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="571" ippo="571">
     <d>
      <invs>
       <arg a="3" i="212"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="763" ippo="763" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="361" ippo="361" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="633" ippo="633" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="s" id="661" ippo="661" s="g">
     <e txt="47-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="136" ippo="136" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="254" ippo="254" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="207" invs="558" ippo="207" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="456" ippo="456" s="g">
     <e txt="upperbound of constant string argument: 32-character string"/>
    </ppo>
    <ppo deps="s" id="7" ippo="7" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="88" ippo="88" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="501" ippo="501" s="g">
     <e txt="79-character string is a string literal"/>
    </ppo>
    <ppo deps="f" id="174" invs="128" ippo="174" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="367" ippo="367" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="179" ippo="179" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="329" ippo="329" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="f" id="350" invs="33" ippo="350" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="655" invs="9" ippo="655" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="692" invs="523" ippo="692" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="f" id="20" invs="493" ippo="20" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3493(rv:getenv)"/>
    </ppo>
    <ppo deps="s" id="352" ippo="352" s="g">
     <e txt="29-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="409" ippo="409" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="625" ippo="625"/>
    <ppo deps="s" id="129" ippo="129" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="397" ippo="397" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="166" ippo="166" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="358" ippo="358" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="376" ippo="376" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="130" ippo="130" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="25" ippo="25" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="479" ippo="479" s="g">
     <e txt="upperbound of constant string argument: 31-character string"/>
    </ppo>
    <ppo deps="f" id="653" invs="9" ippo="653" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="49" ippo="49" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="369" ippo="369" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="200" ippo="200" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="632" ippo="632" s="g">
     <e txt="upperbound of constant string argument: 47-character string"/>
    </ppo>
    <ppo deps="s" id="436" ippo="436" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="62" ippo="851" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="284" invs="172" ippo="284" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="106" ippo="106" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="266" ippo="266" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="688" ippo="688"/>
    <ppo deps="s" id="760" ippo="760" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="133" ippo="133" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="796" ippo="796" s="g">
     <e txt="upperbound of constant string argument: /dev/null"/>
    </ppo>
    <ppo deps="s" id="493" ippo="493" s="g">
     <e txt="unsigned value is always non-negative"/>
    </ppo>
    <ppo deps="f" id="618" invs="102" ippo="618" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="56" ippo="56" s="g">
     <e txt=" value is 3"/>
    </ppo>
    <ppo deps="s" id="422" ippo="422" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="443" ippo="443" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="704" ippo="704">
     <d>
      <invs>
       <arg a="3" i="158,391,488,551"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:function arguments: _"/>
        <msg t="[3]:function return value: strerror"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="164" ippo="164" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="341" ippo="341" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="732" ippo="732" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="718" ippo="718" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="772" ippo="772" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="101" ippo="101" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="69" ippo="69" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="201" ippo="201" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="574" ippo="574" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="346" invs="34" ippo="346" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="674" ippo="674" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="203" ippo="203" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="96" ippo="96" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="288" ippo="288" s="g">
     <e txt="34-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="396" ippo="396" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="761" ippo="761" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="45" ippo="45"/>
    <ppo deps="f" id="78" invs="96" ippo="78" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo id="118" ippo="118"/>
    <ppo deps="f" id="616" invs="539" ippo="616" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="f" id="236" invs="38" ippo="236" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="f" id="23" invs="203" ippo="23" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: _"/>
        <msg t="[2]:function return value: getenv"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function getenv satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="411" ippo="411" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo id="572" ippo="572">
     <d>
      <invs>
       <arg a="1" i="212"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="646" ippo="646" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="696" ippo="696" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="337" ippo="337" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="351" invs="33" ippo="351" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="190" ippo="190" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="393" ippo="393" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="76" invs="1" ippo="76" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="197" ippo="197" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="663" ippo="663"/>
    <ppo deps="s" id="360" ippo="360" s="g">
     <e txt="upperbound of constant string argument: 29-character string"/>
    </ppo>
    <ppo deps="f" id="526" invs="177" ippo="526" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_buf_299"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable buf is not null"/>
    </ppo>
    <ppo id="566" ippo="566"/>
    <ppo deps="s" id="299" ippo="299" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="98" ippo="98" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="214" ippo="214"/>
    <ppo deps="s" id="630" ippo="630" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="f" id="747" invs="442" ippo="747" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo deps="s" id="794" ippo="794" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="711" ippo="711" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo id="769" ippo="769">
     <d>
      <invs>
       <arg a="1" i="75"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="202" ippo="202" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="9" ippo="9" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="450" invs="549" ippo="450" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="719" ippo="719" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="13" ippo="13" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="220" invs="50" ippo="220" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar_temp_buffer_39"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable temp_buffer is not null"/>
    </ppo>
    <ppo deps="s" id="734" ippo="734" s="g">
     <e txt="address of variable limit"/>
    </ppo>
    <ppo deps="s" id="51" ippo="51" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="107" ippo="107" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="312" ippo="312" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="f" id="347" invs="455" ippo="347" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3523(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="735" ippo="735" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="146" ippo="146" s="g">
     <e txt="30-character string is a string literal"/>
    </ppo>
    <ppo deps="f" id="473" invs="557" ippo="473" s="g" ts="2018-01-09 15:50:11">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="500" ippo="500" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="316" invs="101" ippo="316" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="f" id="612" invs="461" ippo="612" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3588(rv:fcntl)"/>
    </ppo>
    <ppo deps="s" id="611" ippo="611" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="304" ippo="304" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="582" ippo="582" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="648" ippo="648" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="90" ippo="90" s="g">
     <e txt="upperbound of constant string argument: %s is a directory ;"/>
    </ppo>
    <ppo id="322" ippo="322"/>
    <ppo deps="f" id="601" invs="480" ippo="601" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3565"/>
    </ppo>
    <ppo deps="s" id="268" ippo="268" s="g">
     <e txt="upperbound of constant string argument: 24-character string"/>
    </ppo>
    <ppo deps="s" id="773" ippo="773" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="598" ippo="598" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="55" ippo="55" s="g">
     <e txt="value 3 is less than minimum word size (16"/>
    </ppo>
    <ppo deps="s" id="132" ippo="132" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="193" ippo="193" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="527" ippo="527" s="g">
     <e txt="adding 10 to the start of an array of length 256"/>
    </ppo>
    <ppo deps="s" id="659" ippo="659" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="657" invs="504" ippo="657" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo deps="s" id="59" ippo="59" s="g">
     <e txt="value 3 is less than minimum word size (16"/>
    </ppo>
    <ppo deps="s" id="165" ippo="165" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="445" ippo="445" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="466" ippo="466" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="698" ippo="698"/>
    <ppo deps="s" id="809" ippo="809" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="223" ippo="223" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="401" invs="118" ippo="401" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="670" ippo="670" s="g">
     <e txt="upperbound of constant string argument: 47-character string"/>
    </ppo>
    <ppo deps="f" id="383" invs="294" ippo="383" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="609" ippo="609" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="410" ippo="410" s="g">
     <e txt="upperbound of constant string argument: No space on device ;"/>
    </ppo>
    <ppo deps="s" id="438" ippo="438" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="467" ippo="467" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="679" ippo="679" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="300" ippo="300" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="549" ippo="549">
     <d>
      <invs>
       <arg a="3" i="277"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="154" ippo="154" s="g">
     <e txt="upperbound of constant string argument: 30-character string"/>
    </ppo>
    <ppo id="151" ippo="151"/>
    <ppo deps="f" id="406" invs="250" ippo="406" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="61" ippo="852" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="158" ippo="158" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="472" invs="205" ippo="472" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="595" ippo="595" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="770" ippo="770" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="575" ippo="575" s="g">
     <e txt="upperbound of constant string argument: 47-character string"/>
    </ppo>
    <ppo id="697" ippo="697"/>
    <ppo deps="f" id="113" invs="261" ippo="113" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="138" ippo="138" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="f" id="471" invs="495" ippo="471" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3533(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="278" ippo="278" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="531" ippo="531" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="584" ippo="584" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="58" ippo="58" s="g">
     <e txt=" value is 3"/>
    </ppo>
    <ppo deps="s" id="170" ippo="170" s="g">
     <e txt="global variable lock_file valid lower bound by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="709" ippo="709" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="f" id="112" invs="261" ippo="112" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="255" ippo="255" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="468" ippo="468" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="267" ippo="267" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo id="48" ippo="48"/>
    <ppo deps="s" id="494" ippo="494" s="g">
     <e txt="index value 1023 is less than bound 1024"/>
    </ppo>
    <ppo deps="s" id="71" ippo="71" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="462" ippo="462" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="536" invs="501" ippo="536" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3548"/>
    </ppo>
    <ppo deps="s" id="524" ippo="524" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="173" invs="476" ippo="173" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3511(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="442" ippo="442" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="260" invs="499" ippo="260" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3517(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="455" ippo="455" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="586" ippo="586" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="775" invs="418" ippo="775" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="4">
        <msg t="[4]:increment is 255"/>
       </arg>
       <arg a="3">
        <msg t="[3]:index size of buf is 256 with offset 0"/>
       </arg>
      </amsgs>
     </d>
     <e txt="increment is less than or equal the size of buf; satisfies (((0 + 255) * 1) &lt;= 256)"/>
    </ppo>
    <ppo deps="s" id="191" ippo="191" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="311" ippo="311" s="g">
     <e txt="valid by inductive hypothesis (checked at each assignment)"/>
    </ppo>
    <ppo deps="s" id="722" ippo="722" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="47" ippo="47" s="g">
     <e txt="null-termination within bounds is checked separately"/>
    </ppo>
    <ppo deps="s" id="91" ippo="91" s="g">
     <e txt="constant string"/>
    </ppo>
    <ppo deps="f" id="282" invs="36" ippo="282" s="g" ts="2018-01-09 15:50:11">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="408" ippo="408" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="97" ippo="97" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="516" ippo="516" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="739" ippo="739" s="g">
     <e txt="address of variable limit"/>
    </ppo>
    <ppo deps="s" id="510" ippo="510" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="594" ippo="594" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="99" ippo="99" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="37" ippo="37" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="567" ippo="567"/>
    <ppo deps="f" id="652" invs="441" ippo="652" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3589(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="680" ippo="680" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="265" ippo="265" s="g">
     <e txt="24-character string is a string literal"/>
    </ppo>
    <ppo deps="s" id="248" ippo="248" s="g">
     <e txt="result of addition is less than or equal to size of the variable temp_buffer (difference with size:  value is 1)"/>
    </ppo>
    <ppo deps="s" id="327" ippo="327" s="g">
     <e txt="string literal"/>
    </ppo>
    <ppo deps="s" id="687" ippo="687" s="g">
     <e txt="global variable lock_file is assigned a value with valid upper bound by inductive hypothesis (checked at assignment)"/>
    </ppo>
    <ppo deps="s" id="41" ippo="41" s="g">
     <e txt=" value is 3"/>
    </ppo>
    <ppo deps="s" id="716" ippo="716" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="486" ippo="486" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="641" ippo="641" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="643" ippo="643" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="198" ippo="198" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="232" ippo="232" s="g">
     <e txt="lock_file is global"/>
    </ppo>
    <ppo deps="s" id="115" ippo="115" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="290" ippo="290"/>
    <ppo deps="s" id="714" ippo="714" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="742" ippo="742" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="597" ippo="597" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="771" ippo="771" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="287" invs="172" ippo="287" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="469" ippo="469" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="46" ippo="46"/>
    <ppo deps="f" id="177" invs="128" ippo="177" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="83" ippo="83" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="35" ippo="35" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="263" invs="229" ippo="263" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="336" ippo="336" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="603" invs="507" ippo="603" s="g" ts="2018-01-09 15:50:11">
     <e txt="assignedAt#3501(rv:open)"/>
    </ppo>
    <ppo deps="f" id="238" invs="79" ippo="238" s="g" ts="2018-01-09 15:50:11">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="621" ippo="621" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="664" ippo="664"/>
    <ppo deps="s" id="29" ippo="29" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="451" invs="153" ippo="451" s="g" ts="2018-01-09 15:50:11">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="43" ippo="43" s="g">
     <e txt=" value is 3"/>
    </ppo>
    <ppo id="86" ippo="86"/>
    <ppo deps="s" id="2" ippo="2" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="620" ippo="620" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
   </ppos>
  </function>
 </c-analysis>
