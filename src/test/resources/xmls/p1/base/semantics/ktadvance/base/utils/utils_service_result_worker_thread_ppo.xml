<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <header time="2018-01-09 17:30:38">
   <application file="base/utils.c"/>
  </header>
  <function fname="service_result_worker_thread">
   <ppos>
    <ppo deps="s" id="239" ippo="239" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="182" ippo="182" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo id="18" ippo="18">
     <d>
      <invs>
       <arg a="1" i="100,191,225"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: "/>
        <msg t="[1]:potential frees not excluded:"/>
        <msg t="[1]:potential frees not excluded:"/>
        <msg t="[1]:potential frees not excluded:"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="50" invs="189" ippo="50" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4778(rv:poll)"/>
    </ppo>
    <ppo deps="s" id="80" ippo="80" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="104" ippo="104" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="s" id="188" ippo="188" s="g">
     <e txt="add non-negative number:  value is 1"/>
    </ppo>
    <ppo deps="f" id="4" invs="78" ippo="4" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_localvar___cancel_buf_10"/>
       </arg>
      </amsgs>
     </d>
     <e txt="address of stack variable __cancel_buf is pointing to valid memory"/>
    </ppo>
    <ppo deps="s" id="219" ippo="219" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="s" id="258" ippo="258" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="103" ippo="103" s="g">
     <e txt="address of variable service_result_buffer"/>
    </ppo>
    <ppo id="189" ippo="189">
     <d>
      <invs>
       <arg a="3" i="12"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="102" ippo="102" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="f" id="145" invs="207" ippo="145" s="g" ts="2018-01-09 15:51:08">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="f" id="15" invs="99" ippo="15" s="g" ts="2018-01-09 15:51:08">
     <e txt="lower bound value is address of global variable cleanup_service_result_worker_thread"/>
    </ppo>
    <ppo deps="s" id="221" ippo="221" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="s" id="180" ippo="180" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="121" ippo="121" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="f" id="141" invs="168" ippo="141" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4834"/>
    </ppo>
    <ppo id="216" ippo="216">
     <d>
      <invs>
       <arg a="3" i="103"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="168" ippo="168" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="f" id="152" invs="187" ippo="152" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4834"/>
    </ppo>
    <ppo deps="f" id="205" invs="124" ippo="205" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: 496"/>
        <msg t="[2]:function return value: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="offset size 0 is less than the size of (malloc(496)#return (496)"/>
    </ppo>
    <ppo deps="s" id="8" ippo="8" s="g">
     <e txt="casting from int to long is safe"/>
    </ppo>
    <ppo deps="s" id="160" ippo="160" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="204" invs="92" ippo="204" s="g" ts="2018-01-09 15:51:08">
     <e txt="return value from function malloc satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo id="235" ippo="235"/>
    <ppo deps="s" id="246" ippo="246" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo id="195" ippo="195"/>
    <ppo deps="f" id="54" invs="224" ippo="54" s="g" ts="2018-01-09 15:51:08">
     <e txt="all memory regions potentially pointed at are valid: addr_in_(__errno_location()#return"/>
    </ppo>
    <ppo deps="s" id="124" ippo="124" s="g">
     <e txt="ipc_pipe is global"/>
    </ppo>
    <ppo deps="f" id="140" invs="165" ippo="140" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4834(rv:read)"/>
    </ppo>
    <ppo deps="s" id="1" ippo="1" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="77" ippo="77" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="242" ippo="242" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="159" invs="177" ippo="159" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4873"/>
    </ppo>
    <ppo deps="s" id="3" ippo="3" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="f" id="16" invs="99" ippo="16" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:memory address: (1)address"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound-value is address of global variable cleanup_service_result_worker_thread"/>
    </ppo>
    <ppo deps="s" id="21" ippo="21" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="36" ippo="36" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="131" ippo="131" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="231" ippo="231" s="g">
     <e txt="null pointer cannot be dereferenced, and hence target cannot be initialized (acceptability of null is checked separately)"/>
    </ppo>
    <ppo deps="s" id="68" ippo="68" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="213" ippo="213" s="g">
     <e txt="check_result_buffer_slots is global"/>
    </ppo>
    <ppo deps="s" id="122" ippo="122" s="g">
     <e txt="arguments of pointer arithmetic are checked for null"/>
    </ppo>
    <ppo deps="s" id="181" ippo="181" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="237" ippo="237"/>
    <ppo deps="s" id="85" ippo="85" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="100" ippo="100" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="26" ippo="26" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="105" ippo="105" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="225" ippo="225" s="g">
     <e txt="casting from int to long is safe"/>
    </ppo>
    <ppo deps="s" id="247" ippo="247" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="135" ippo="135" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy lowerbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="63" ippo="63" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="176" ippo="176" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="186" ippo="186" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo id="192" ippo="192"/>
    <ppo id="211" ippo="211"/>
    <ppo deps="s" id="259" ippo="259" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="125" ippo="125" s="g">
     <e txt="index value 0 is non-negative"/>
    </ppo>
    <ppo deps="f" id="143" invs="173" ippo="143" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4840(rv:__errno_location)"/>
    </ppo>
    <ppo id="19" ippo="19">
     <d>
      <invs>
       <arg a="2" i="100,191,225"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="32" ippo="32" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="227" ippo="227" s="g">
     <e txt="address of variable tv"/>
    </ppo>
    <ppo deps="f" id="17" invs="191" ippo="17" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4763"/>
    </ppo>
    <ppo deps="f" id="172" invs="122" ippo="172" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: 496"/>
        <msg t="[2]:function return value: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="offset size 0 is less than the size of (malloc(496)#return (496)"/>
    </ppo>
    <ppo id="228" ippo="228"/>
    <ppo deps="s" id="226" ippo="226" s="g">
     <e txt="casting from int to long is safe"/>
    </ppo>
    <ppo deps="s" id="199" ippo="199" s="g">
     <e txt="arguments of pointer arithmetic are checked for null"/>
    </ppo>
    <ppo deps="s" id="264" ippo="264" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="117" invs="140" ippo="117" s="g" ts="2018-01-09 15:51:08">
     <e txt="value is less than safe bound; satisfies constraint: (989 &lt;= 2147483647)"/>
    </ppo>
    <ppo deps="s" id="208" ippo="208" s="g">
     <e txt="add non-negative number:  value is 1"/>
    </ppo>
    <ppo deps="s" id="60" ippo="60" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="150" invs="194" ippo="150" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4826_xx_assignedAt#4856"/>
    </ppo>
    <ppo deps="s" id="187" ippo="187" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="s" id="244" ippo="244" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="161" ippo="161" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="142" invs="35" ippo="142" s="g" ts="2018-01-09 15:51:08">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="f" id="144" invs="34" ippo="144" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo id="137" ippo="137">
     <d>
      <invs>
       <arg a="3" i="136,178"/>
      </invs>
      <msgs>
       <msg t="remaining constraint: (-493 &gt;= 0) (--&gt; false)"/>
       <msg t="encountered lower-bound expr that may be negative: -493"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="262" ippo="262" s="g">
     <e txt="null pointer is a non-local address"/>
    </ppo>
    <ppo deps="f" id="27" invs="16" ippo="27" s="r" ts="2018-01-09 15:51:08">
     <e txt="value is explicitly set to NULL"/>
    </ppo>
    <ppo deps="s" id="243" ippo="243" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="f" id="157" invs="174" ippo="157" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4873(rv:malloc)"/>
    </ppo>
    <ppo deps="s" id="194" ippo="194" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="s" id="212" ippo="212" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="s" id="87" ippo="87" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="84" ippo="84" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="183" ippo="183" s="g">
     <e txt="check_result_buffer_slots is global"/>
    </ppo>
    <ppo deps="f" id="171" invs="55" ippo="171" s="g" ts="2018-01-09 15:51:08">
     <e txt="return value from function malloc satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="34" ippo="34" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="241" ippo="241" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="251" ippo="251" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="169" invs="175" ippo="169" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4873"/>
    </ppo>
    <ppo deps="s" id="127" ippo="127" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="s" id="22" ippo="22" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="215" ippo="215" s="g">
     <e txt="add non-negative number:  value is 1"/>
    </ppo>
    <ppo deps="s" id="222" ippo="222" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="28" ippo="28" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="f" id="148" invs="182" ippo="148" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4834"/>
    </ppo>
    <ppo deps="s" id="65" ippo="65" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo id="44" ippo="44">
     <d>
      <invs>
       <arg a="1" i="73"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:value: 1"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="f" id="5" invs="78" ippo="5" s="g" ts="2018-01-09 15:51:08">
     <e txt="lower-bound value is address of stack variable __cancel_buf"/>
    </ppo>
    <ppo deps="s" id="120" ippo="120" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="184" ippo="184" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo id="162" ippo="162"/>
    <ppo deps="s" id="72" ippo="72" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="261" ippo="261" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="f" id="33" invs="109" ippo="33" s="r" ts="2018-01-09 15:51:08">
     <e txt="value is explicitly set to NULL"/>
    </ppo>
    <ppo deps="s" id="64" ippo="64" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="93" ippo="93" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="119" invs="183" ippo="119" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4826_xx_assignedAt#4856"/>
    </ppo>
    <ppo deps="s" id="175" ippo="175" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="233" ippo="233" s="g">
     <e txt="one of the arguments is a null pointer "/>
    </ppo>
    <ppo deps="s" id="92" ippo="92" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="f" id="10" invs="196" ippo="10" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4763(rv:__builtin_expect)"/>
    </ppo>
    <ppo deps="s" id="224" ippo="224" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="136" ippo="136"/>
    <ppo deps="s" id="254" ippo="254" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="153" invs="143,142" ippo="153" s="g" ts="2018-01-09 15:51:08">
     <e txt="result of subtraction is greater than or equal to MIN: satisfies ((2 - 495) &gt;= -2147483648)"/>
    </ppo>
    <ppo deps="s" id="39" ippo="39" s="g">
     <e txt="ipc_pipe is global"/>
    </ppo>
    <ppo deps="s" id="207" ippo="207" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="f" id="7" invs="181" ippo="7" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4763(rv:__sigsetjmp)"/>
    </ppo>
    <ppo deps="s" id="88" ippo="88" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="174" ippo="174" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="126" ippo="126" s="g">
     <e txt="index value 0 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="179" ippo="179" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo id="20" ippo="20">
     <d>
      <invs>
       <arg a="2" i="100,191,225"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="129" invs="179" ippo="129" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4831"/>
    </ppo>
    <ppo deps="f" id="108" invs="171" ippo="108" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4816"/>
    </ppo>
    <ppo deps="s" id="166" ippo="166" s="g">
     <e txt="adding 496 to start of variable of size 496"/>
    </ppo>
    <ppo deps="s" id="130" ippo="130" s="g">
     <e txt="address of variable message"/>
    </ppo>
    <ppo deps="s" id="25" ippo="25" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="49" invs="190" ippo="49" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4778(rv:poll)"/>
    </ppo>
    <ppo deps="f" id="52" invs="188" ippo="52" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4787(rv:__errno_location)"/>
    </ppo>
    <ppo deps="s" id="200" ippo="200" s="g">
     <e txt="pointer arithmetic stays within memory region"/>
    </ppo>
    <ppo deps="s" id="250" ippo="250" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="30" ippo="30" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="62" ippo="62" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="185" ippo="185" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="106" ippo="106" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="206" invs="223" ippo="206" s="g" ts="2018-01-09 15:51:08">
     <e txt="all memory regions potentially pointed at are valid: addrof_heapregion_1"/>
    </ppo>
    <ppo id="14" ippo="14">
     <d>
      <invs>
       <arg a="1" i="99,192,226"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:potential frees not excluded: "/>
        <msg t="[1]:potential frees not excluded:"/>
        <msg t="[1]:potential frees not excluded:"/>
        <msg t="[1]:potential frees not excluded:"/>
        <msg t="[1]:memory base: addrof_globalvar_cleanup_service_result_worker_thread"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="111" ippo="111" s="g">
     <e txt="adding 496 to start of variable of size 496"/>
    </ppo>
    <ppo deps="s" id="82" ippo="82" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo id="133" ippo="133">
     <d>
      <invs>
       <arg a="4" i="135,179"/>
       <arg a="3" i="67"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:memory base: addrof_localvar_message_105"/>
        <msg t="[3]:memory address: (10)address"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="89" ippo="89" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="56" invs="96" ippo="56" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="79" ippo="79" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="217" ippo="217" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="f" id="164" invs="122" ippo="164" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="4">
        <msg t="[4]:increment is 496"/>
       </arg>
       <arg a="3">
        <msg t="[3]:index size of (malloc(496)#return is 496 with offset 0"/>
        <msg t="[3]:function arguments: 496"/>
        <msg t="[3]:function return value: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="increment is less than or equal the size of (malloc(496)#return; satisfies (((0 + 496) * 1) &lt;= 496)"/>
    </ppo>
    <ppo deps="s" id="31" ippo="31" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="12" invs="192" ippo="12" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4763(fptrcleanup_service_result_worker_thread8278)"/>
    </ppo>
    <ppo deps="s" id="101" ippo="101" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="209" ippo="209">
     <d>
      <invs>
       <arg a="3" i="70"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="69" ippo="69" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="201" ippo="201" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy lowerbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="203" invs="185" ippo="203" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4873"/>
    </ppo>
    <ppo deps="s" id="96" ippo="96" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="45" ippo="45" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="78" ippo="78" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo id="118" ippo="118">
     <d>
      <invs>
       <arg a="3" i="141,183"/>
      </invs>
      <msgs>
       <msg t="remaining constraint: (-493 &gt;= 0) (--&gt; false)"/>
       <msg t="encountered lower-bound expr that may be negative: -493"/>
      </msgs>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="81" ippo="81" s="g">
     <e txt="logging_options is global"/>
    </ppo>
    <ppo deps="s" id="128" ippo="128" s="g">
     <e txt="cast to character type"/>
    </ppo>
    <ppo id="236" ippo="236"/>
    <ppo deps="s" id="23" ippo="23" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="70" ippo="70" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="134" ippo="134" s="g">
     <e txt="pointer arithmetic stays within memory region"/>
    </ppo>
    <ppo deps="s" id="24" ippo="24" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="94" ippo="94" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="109" ippo="109" s="g">
     <e txt="check_result_buffer_slots is global"/>
    </ppo>
    <ppo deps="s" id="190" ippo="190" s="g">
     <e txt="check_result_buffer_slots is global"/>
    </ppo>
    <ppo id="167" ippo="167">
     <d>
      <invs>
       <arg a="1" i="58"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:value: 496"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="76" ippo="76" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo id="197" ippo="197"/>
    <ppo deps="s" id="245" ippo="245" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="57" ippo="57" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo id="156" ippo="156"/>
    <ppo deps="s" id="257" ippo="257" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="98" ippo="98" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="s" id="214" ippo="214" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="f" id="11" invs="9" ippo="11" s="g" ts="2018-01-09 15:51:08">
     <e txt="variable __cancel_routine is initialized with function pointer cleanup_service_result_worker_thread"/>
    </ppo>
    <ppo deps="s" id="202" ippo="202" s="g">
     <e txt="result of pointer arithmetic is guaranteed to satisfy upperbound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="9" invs="193" ippo="9" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4763"/>
    </ppo>
    <ppo deps="f" id="13" invs="99" ippo="13" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:memory base: addrof_globalvar_cleanup_service_result_worker_thread"/>
       </arg>
      </amsgs>
     </d>
     <e txt="value is address of global variable cleanup_service_result_worker_thread"/>
    </ppo>
    <ppo deps="s" id="220" ippo="220" s="g">
     <e txt="address of variable service_result_buffer"/>
    </ppo>
    <ppo deps="f" id="51" invs="19" ippo="51" s="g" ts="2018-01-09 15:51:08">
     <e txt="variable pointed to by return value from __errno_location is initialized"/>
    </ppo>
    <ppo deps="s" id="107" ippo="107" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="146" invs="34" ippo="146" s="g" ts="2018-01-09 15:51:08">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="249" ippo="249" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="90" ippo="90" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="40" ippo="40" s="g">
     <e txt="index value 0 is non-negative"/>
    </ppo>
    <ppo deps="s" id="210" ippo="210" s="g">
     <e txt="check_result_buffer_slots is global"/>
    </ppo>
    <ppo deps="s" id="67" ippo="67" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="f" id="55" invs="96" ippo="55" s="g" ts="2018-01-09 15:51:08">
     <e txt="return value from function __errno_location satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="f" id="132" invs="135" ippo="132" s="g" ts="2018-01-09 15:51:08">
     <e txt="non-negative pointer increment: lower bound for write_offset is 0"/>
    </ppo>
    <ppo deps="s" id="110" ippo="110" s="g">
     <e txt="address of variable message"/>
    </ppo>
    <ppo deps="s" id="193" ippo="193" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="s" id="59" ippo="59" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="s" id="165" ippo="165" s="g">
     <e txt="address of variable message"/>
    </ppo>
    <ppo id="196" ippo="196"/>
    <ppo deps="s" id="223" ippo="223" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="6" invs="78" ippo="6" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:memory address: (2)address"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is address of stack variable __cancel_buf"/>
    </ppo>
    <ppo id="155" ippo="155">
     <d>
      <invs>
       <arg a="1" i="137"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="f" id="116" invs="106" ippo="116" s="g" ts="2018-01-09 15:51:08">
     <e txt="value is less than safe bound; satisfies constraint: (496 &lt;= 2147483647)"/>
    </ppo>
    <ppo deps="f" id="154" invs="142" ippo="154" s="g" ts="2018-01-09 15:51:08">
     <e txt="subtracting non-negative value (lowerbound is 1)"/>
    </ppo>
    <ppo deps="f" id="151" invs="186" ippo="151" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4826_xx_assignedAt#4856"/>
    </ppo>
    <ppo deps="s" id="38" ippo="38" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="61" ippo="61" s="g">
     <e txt="logging_options is global"/>
    </ppo>
    <ppo deps="s" id="158" ippo="158" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="s" id="113" ippo="113" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="f" id="138" invs="178" ippo="138" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4826_xx_assignedAt#4856"/>
    </ppo>
    <ppo deps="s" id="256" ippo="256" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="58" ippo="58" s="g">
     <e txt="constant string is allocated by compiler"/>
    </ppo>
    <ppo deps="f" id="170" invs="210" ippo="170" s="g" ts="2018-01-09 15:51:08">
     <e txt="all memory regions potentially pointed at are valid: addrof_heapregion_1"/>
    </ppo>
    <ppo deps="s" id="74" ippo="74" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="112" ippo="112" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="s" id="178" ippo="178" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="s" id="255" ippo="255" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="75" ippo="75" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo id="123" ippo="123">
     <d>
      <invs>
       <arg a="4" i="134,180"/>
      </invs>
      <msgs/>
      <amsgs/>
     </d>
    </ppo>
    <ppo deps="s" id="48" ippo="48" s="g">
     <e txt="constant value 1 fits in type unsigned long"/>
    </ppo>
    <ppo deps="f" id="139" invs="131" ippo="139" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:remaining constraint for lower bound: ((read(_^_^_)#return &gt;= -2147483648); remaining constraint for upper bound: ((read(_^_^_)#return &lt;= 2147483647)"/>
       </arg>
      </amsgs>
     </d>
     <e txt="both lower bound: -1 and upper bound 496 fit in range [-2147483648 - 2147483647]"/>
    </ppo>
    <ppo deps="f" id="147" invs="34" ippo="147" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments:"/>
        <msg t="[2]:function return value: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function __errno_location satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="71" ippo="71" s="g">
     <e txt="logging_options is global"/>
    </ppo>
    <ppo deps="s" id="234" ippo="234" s="g">
     <e txt="one of the arguments is a null pointer "/>
    </ppo>
    <ppo deps="s" id="173" ippo="173" s="g">
     <e txt="cast to void pointer"/>
    </ppo>
    <ppo deps="s" id="260" ippo="260" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="53" invs="96" ippo="53" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: __errno_location"/>
       </arg>
      </amsgs>
     </d>
     <e txt="return value from __errno_location is guaranteed not null"/>
    </ppo>
    <ppo deps="s" id="240" ippo="240" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo id="191" ippo="191"/>
    <ppo deps="s" id="218" ippo="218" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="s" id="47" ippo="47" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="73" ippo="73" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="91" ippo="91" s="g">
     <e txt="logging_options is global"/>
    </ppo>
    <ppo deps="s" id="97" ippo="97" s="g">
     <e txt="address of variable service_result_buffer"/>
    </ppo>
    <ppo deps="f" id="163" invs="122" ippo="163" s="g" ts="2018-01-09 15:51:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="1">
        <msg t="[1]:function return value from: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="null has been explicitly excluded (either by assignment or by checking)"/>
    </ppo>
    <ppo deps="s" id="230" ippo="230" s="g">
     <e txt="null pointer cannot be dereferenced, and hence target cannot be initialized (acceptability of null is checked separately)"/>
    </ppo>
    <ppo deps="s" id="99" ippo="99" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="114" ippo="114" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="37" ippo="37" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="252" ippo="252" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="248" ippo="248" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="41" ippo="41" s="g">
     <e txt="index value 0 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="95" ippo="95" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="f" id="149" invs="195" ippo="149" s="g" ts="2018-01-09 15:51:08">
     <e txt="assignedAt#4834"/>
    </ppo>
    <ppo id="198" ippo="198"/>
    <ppo deps="s" id="232" ippo="232" s="g">
     <e txt="one of the arguments is a null pointer "/>
    </ppo>
    <ppo deps="s" id="115" ippo="115" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="42" ippo="42" s="g">
     <e txt="address of variable pfd"/>
    </ppo>
    <ppo deps="s" id="253" ippo="253" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="229" ippo="229" s="g">
     <e txt="null pointer cannot be dereferenced, and hence target cannot be initialized (acceptability of null is checked separately)"/>
    </ppo>
    <ppo deps="s" id="46" ippo="46" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="177" ippo="177" s="g">
     <e txt="address of variable service_result_buffer"/>
    </ppo>
    <ppo deps="s" id="66" ippo="66" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="83" ippo="83" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="35" ippo="35" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="263" ippo="263" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="238" ippo="238" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="29" ippo="29" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo id="43" ippo="43">
     <d>
      <invs>
       <arg a="4" i="71"/>
       <arg a="3" i="73"/>
      </invs>
      <msgs/>
      <amsgs>
       <arg a="3">
        <msg t="[3]:memory base: addrof_localvar_pfd_47"/>
        <msg t="[3]:memory address: (4)address"/>
       </arg>
      </amsgs>
     </d>
    </ppo>
    <ppo deps="s" id="86" ippo="86" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo id="2" ippo="2"/>
   </ppos>
  </function>
 </c-analysis>
