<?xml version="1.0" encoding="UTF-8"?>
 <c-analysis>
  <header time="2018-01-09 17:29:32">
   <application file="base/utils.c"/>
  </header>
  <function fname="init_service_result_worker_thread">
   <ppos>
    <ppo deps="s" id="18" ippo="18" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="19" ippo="19" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="32" ippo="32" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="17" ippo="17" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="50" ippo="50" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="25" ippo="25" s="g">
     <e txt="address of variable newmask"/>
    </ppo>
    <ppo deps="s" id="40" ippo="40" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="49" ippo="49" s="g">
     <e txt="index value 1 is less than bound 2"/>
    </ppo>
    <ppo deps="s" id="52" ippo="52" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo id="67" ippo="67"/>
    <ppo deps="s" id="4" ippo="4" s="g">
     <e txt="overflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="55" ippo="55" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo id="30" ippo="30"/>
    <ppo deps="s" id="62" ippo="62" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="60" ippo="60" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="14" ippo="14" s="g">
     <e txt="null pointer cannot be dereferenced, and hence target cannot be initialized (acceptability of null is checked separately)"/>
    </ppo>
    <ppo deps="s" id="59" ippo="59" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="f" id="6" invs="54" ippo="6" s="g" ts="2018-01-09 15:50:08">
     <e txt="assignedAt#4627(rv:malloc)"/>
    </ppo>
    <ppo deps="s" id="15" ippo="15" s="g">
     <e txt="address of variable service_result_buffer"/>
    </ppo>
    <ppo deps="s" id="27" ippo="27" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="38" ippo="38" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="56" ippo="56" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="61" ippo="61" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="31" ippo="31" s="g">
     <e txt="one of the arguments is a null pointer "/>
    </ppo>
    <ppo deps="s" id="12" ippo="12" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="58" ippo="58" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="34" ippo="34" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="69" ippo="69" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="74" ippo="74" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="8" invs="31" ippo="8" s="g" ts="2018-01-09 15:50:08">
     <d>
      <invs/>
      <msgs/>
      <amsgs>
       <arg a="2">
        <msg t="[2]:function arguments: _"/>
        <msg t="[2]:function return value: malloc"/>
       </arg>
      </amsgs>
     </d>
     <e txt="upper-bound value is return value from function malloc satisfies upper bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="75" ippo="75" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="48" ippo="48" s="g">
     <e txt="index value 1 is non-negative"/>
    </ppo>
    <ppo deps="s" id="71" ippo="71" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="22" ippo="22" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="45" ippo="45" s="g">
     <e txt="null pointer cannot be dereferenced, and hence target cannot be initialized (acceptability of null is checked separately)"/>
    </ppo>
    <ppo deps="s" id="54" ippo="54" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="f" id="78" invs="56" ippo="78" s="g" ts="2018-01-09 15:50:08">
     <e txt="assignedAt#4639(rv:pthread_create)"/>
    </ppo>
    <ppo id="1" ippo="1"/>
    <ppo deps="s" id="28" ippo="28" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="53" ippo="53" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="23" ippo="23" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="65" ippo="65" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="77" ippo="77" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="47" ippo="47" s="g">
     <e txt="source and target type are the same"/>
    </ppo>
    <ppo deps="s" id="73" ippo="73" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="44" ippo="44" s="g">
     <e txt="service_result_worker_thread is global"/>
    </ppo>
    <ppo id="5" ippo="5"/>
    <ppo deps="s" id="70" ippo="70" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="3" ippo="3" s="g">
     <e txt="underflow is well defined for unsigned types"/>
    </ppo>
    <ppo deps="s" id="16" ippo="16" s="g">
     <e txt="one of the arguments is a null pointer "/>
    </ppo>
    <ppo deps="s" id="24" ippo="24" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="72" ippo="72" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="21" ippo="21" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="33" ippo="33" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="37" ippo="37" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="64" ippo="64" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="36" ippo="36" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
    <ppo deps="s" id="76" ippo="76" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="41" ippo="41" s="r">
     <e txt="expression is a null pointer"/>
    </ppo>
    <ppo deps="s" id="57" ippo="57" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="68" ippo="68" s="g">
     <e txt="one of the arguments is a null pointer "/>
    </ppo>
    <ppo deps="s" id="10" ippo="10" s="g">
     <e txt="casting a pointer to integer type unsigned long"/>
    </ppo>
    <ppo deps="s" id="26" ippo="26" s="g">
     <e txt="address of a variable is a valid memory region"/>
    </ppo>
    <ppo deps="s" id="42" ippo="42" s="g">
     <e txt="null pointer cannot be dereferenced, and hence target cannot be initialized (acceptability of null is checked separately)"/>
    </ppo>
    <ppo deps="s" id="11" ippo="11" s="g">
     <e txt="service_result_buffer is global"/>
    </ppo>
    <ppo deps="f" id="9" invs="59" ippo="9" s="g" ts="2018-01-09 15:50:08">
     <e txt="all memory regions potentially pointed at are valid: addrof_heapregion_1"/>
    </ppo>
    <ppo deps="s" id="46" ippo="46" s="g">
     <e txt="address of variable worker_threads"/>
    </ppo>
    <ppo deps="s" id="13" ippo="13" s="g">
     <e txt="null-pointer cast"/>
    </ppo>
    <ppo deps="s" id="39" ippo="39" s="g">
     <e txt="null pointer does not violate bounds"/>
    </ppo>
    <ppo deps="s" id="63" ippo="63" s="g">
     <e txt="null pointer is a valid memory pointer"/>
    </ppo>
    <ppo deps="s" id="66" ippo="66" s="g">
     <e txt="address of variable newmask"/>
    </ppo>
    <ppo deps="f" id="7" invs="31" ippo="7" s="g" ts="2018-01-09 15:50:08">
     <e txt="return value from function malloc satisfies lower bound by inductive hypothesis"/>
    </ppo>
    <ppo deps="s" id="35" ippo="35" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="51" ippo="51" s="g">
     <e txt="address of a variable"/>
    </ppo>
    <ppo deps="s" id="29" ippo="29" s="g">
     <e txt="address of variable newmask"/>
    </ppo>
    <ppo deps="s" id="43" ippo="43" s="g">
     <e txt="address of variable service_result_worker_thread"/>
    </ppo>
    <ppo deps="s" id="2" ippo="2" s="g">
     <e txt="check_result_buffer_slots is global"/>
    </ppo>
    <ppo deps="s" id="20" ippo="20" s="g">
     <e txt="cast of null-pointer"/>
    </ppo>
   </ppos>
  </function>
 </c-analysis>
